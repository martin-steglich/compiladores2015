package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.program.*;
import com.language.model.expression.*;
import com.language.model.statement.*;
import com.language.exceptions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Collections;

parser code {:
	public void syntax_error(Symbol s){
		//int line = s.left + 1;
		//int column = s.right + 1;
		int line = s.left;
		int column = s.right;
		if(s.value==null) {
			throw new ParsingException(line, "Sintaxis incorrecta");
		} else {
			throw new ParsingException(line, column, "Sintaxis incorrecta: " + s.value);
		}
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	}
:}

action code {:

	private boolean returnFlag;
	private int returnLine = 0;
	private int returnColumn = 0;

	private boolean breakFlag;
	private int breakLine = 0;
	private int breakColumn = 0;
	
	private boolean continueFlag;
	private int continueLine = 0;
	private int continueColumn = 0;
	
	public void setReturnFlag(boolean value) {
		returnFlag = value;
		//returnLine = line;
		//returnColumn = column;
	}
	
	public void setBreakFlag(boolean value) {
		breakFlag = value;
		//breakLine = line;
		//breakColumn = column;
	}
	
	public void setContinueFlag(boolean value) {
		continueFlag = value;
		//continueLine = line;
		//continueColumn = column;
	}
	
	public void checkReturnErrors() {
		if (returnFlag) { 
			throw new ParsingException(returnLine, returnColumn, "Sintaxis incorrecta: return");
		}
	}

	public void checkBreakContinueErrors() {
		if (breakFlag) {
			throw new ParsingException(breakLine, breakColumn, "Sintaxis incorrecta: break");
		}
		if (continueFlag) {
			throw new ParsingException(continueLine, continueColumn, "Sintaxis incorrecta: continue");
		}
	}
	
 :}; 
 

terminal String ID, INTEGER, LONG, FLOAT, STRING, TRUE, FALSE;

terminal String ASSIGN, PLUS, MINUS, MUL, DIV, EXP, INT_DIV, MOD;

terminal String AND_BIT, OR_BIT, XOR_BIT, NOT_BIT, LSHIFT_BIT, RSHIFT_BIT;

terminal String AND, OR, NOT, EQUALS, NOT_EQUALS, LESS_THAN, GREAT_THAN, LESSEQUAL_THAN, GREATEQUAL_THAN;

terminal String PRINT, TYPE, RAW_INPUT;

terminal String NEWLINE;

terminal String START_BLOCK, END_BLOCK;

terminal String IF, ELSE, DEF, WHILE, FOR, IN;

terminal String LEFTPARENTHESE, RIGHTPARENTHESE;

terminal String COLON, SEMICOLON, COMMA;

terminal String BREAK, CONTINUE;

terminal String LEFTLLAVE, RIGHTLLAVE, LEFTRECT, RIGHTRECT;

terminal String DOT;

terminal String RETURN;


non terminal program, module;
non terminal statement_newline_list, simple_statement_list, simple_statement, compound_statement;
non terminal stmt_list, simple_stmt_semicolon_list, statement, statement_list;
non terminal Expression expression, map_expression, tuple_expression, list_expression;
non terminal expression_map_list, expression_tuple_list, expression_list_list;
non terminal block;
non terminal function_parameters, function_parameters_list;
non terminal arguments, argument_list;

precedence left IF, ELSE;
precedence left ASSIGN;
precedence left NOT;
precedence left AND;
precedence left OR;
precedence left EQUALS, NOT_EQUALS, LESS_THAN, GREAT_THAN, LESSEQUAL_THAN, GREATEQUAL_THAN;
precedence left PLUS, MINUS;
precedence left MUL, DIV, EXP, INT_DIV, MOD;
precedence left AND_BIT, OR_BIT, XOR_BIT, LSHIFT_BIT, RSHIFT_BIT;
precedence right ID, LEFTRECT, LEFTPARENTHESE;



program	::=	module:list {: 
							Collections.reverse((List<Statement>)list);
							RESULT = new Program((List<Statement>)list);
						:};
						
module ::= simple_statement:stmt simple_statement_list:list {:
						 										((List<Statement>)list).add((Statement)stmt);
																RESULT = list;
															:}
		   | statement_newline_list:list {: 
		   									RESULT = list; 
		   								 :};
		   								 
statement_newline_list ::=	NEWLINE statement_newline_list:list {:
																	RESULT = list; 
																:} 
							| statement:stmt statement_newline_list:list {: 
																			((List<Statement>)list).addAll((List<Statement>)stmt);
																			RESULT = list;
																		 :}
							| 			
							/*epsilon*/							
							{: 
								RESULT = new LinkedList<Statement>(); 
							:}; 
															
simple_statement_list ::= simple_statement:stmt simple_statement_list:list {: 	
																				((List<Statement>)list).add((Statement)stmt);
																				RESULT = list;
																			:}
						  | 
						  /* epsilon */
						  {: 
						  	RESULT = new LinkedList<Statement>(); 
						  :};
						  
simple_statement ::= expression:e {: RESULT = e; :} 
					 | ID:i ASSIGN expression:e {: RESULT = new AssignStatement(i, (Expression)e, ileft); :}
					 | PRINT:p expression:e {: RESULT = new PrintStatement((Expression) e, pleft); :}
					 | TYPE:t LEFTPARENTHESE expression:e RIGHTPARENTHESE {: RESULT = new TypeStatement((Expression) e, tleft);	:}
					 | BREAK :b  {: setBreakFlag(true);
									RESULT = new BreakStatement(bleft); 
								:}
					 | CONTINUE :c {: setContinueFlag(true);
									  RESULT = new ContinueStatement(cleft); :}
					 | ID:i LEFTRECT expression:k RIGHTRECT ASSIGN expression:e {: IdentifierExpression id = new IdentifierExpression(i, ileft);
					 															   RESULT = new AssignStructuredTypeStatement(id, e, k, ileft);
					 															:}
					 | RETURN expression_list_list:list {:	setReturnFlag(true); 
					 									   	RESULT = new ReturnStatement((List<Expression>) list, 0);
					 									:};

expression ::= INTEGER:i {: RESULT = new IntegerExpression(Integer.valueOf(i), ileft); :}
			| STRING:s {: RESULT = new StringExpression(s, sleft); :}
			| LONG:l {: RESULT = new LongExpression(l, lleft); :}
			| FLOAT:f {: RESULT = new FloatExpression(Float.valueOf(f), fleft); :}
			| TRUE:b {: RESULT = new BooleanExpression(true, bleft); :}
			| FALSE:b {: RESULT = new BooleanExpression(false, bleft); :}	
			| ID:i {: RESULT = new IdentifierExpression(i, ileft); :}
			| LEFTPARENTHESE expression:e RIGHTPARENTHESE {: RESULT = e; :}
			| expression:l PLUS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "+", (Expression)r, lleft) ;:}
			| expression:l MINUS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "-", (Expression)r, lleft) ;:}
			| expression:l DIV expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "/", (Expression)r, lleft) ;:}
			| expression:l MUL expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "*", (Expression)r, lleft) ;:}
			| expression:l EXP expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "**", (Expression)r, lleft) ;:}
			| expression:l INT_DIV expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "//", (Expression)r, lleft) ;:}
			| expression:l MOD expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "%", (Expression)r, lleft) ;:}
			| expression:l AND expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "and", (Expression)r, lleft) ;:}
			| expression:l OR expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "or", (Expression)r, lleft) ;:}
			| expression:l EQUALS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "==", (Expression)r, lleft) ;:}
			| expression:l NOT_EQUALS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "!=", (Expression)r, lleft) ;:}
			| expression:l LESS_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<", (Expression)r, lleft) ;:}
			| expression:l LESSEQUAL_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<=", (Expression)r, lleft) ;:}
			| expression:l GREAT_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">", (Expression)r, lleft) ;:}
			| expression:l GREATEQUAL_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">=", (Expression)r, lleft) ;:}
			| expression:l AND_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "&", (Expression)r, lleft) ;:}
			| expression:l OR_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "|", (Expression)r, lleft) ;:}
			| expression:l XOR_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "^", (Expression)r, lleft) ;:}
			| expression:l LSHIFT_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<<", (Expression)r, lleft) ;:}
			| expression:l RSHIFT_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">>", (Expression)r, lleft) ;:}
			| MINUS expression:e {: RESULT = new UnaryOperationExpression("-", (Expression)e, eleft); :}
			| NOT_BIT expression:e {: RESULT = new UnaryOperationExpression("~", (Expression)e, eleft); :}
			| NOT expression:e {: RESULT = new UnaryOperationExpression("not", (Expression)e, eleft); :}
			| RAW_INPUT LEFTPARENTHESE expression:e RIGHTPARENTHESE {: RESULT = new ReadExpression((Expression) e, eleft); :}
			| tuple_expression:e {: RESULT = e; :}
			| map_expression:e {: RESULT = e; :}
			| list_expression:e {: RESULT = e; :}
			| ID:i LEFTRECT expression:e RIGHTRECT {:	IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   			RESULT = new StructuredTypePositionExpression(id, e, null, null,false, ileft);
											   	   :}
			| ID:i LEFTRECT expression:s COLON RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 RESULT = new StructuredTypePositionExpression(id, s, null, null,true, ileft);
											   	   					  :}
			| ID:i LEFTRECT  COLON expression:s RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft);
															 		RESULT = new StructuredTypePositionExpression(id, null, s, null,true, ileft);
											   	   					  :}
			| ID:i LEFTRECT expression:s COLON expression:e RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							
											   							 RESULT = new StructuredTypePositionExpression(id, s, e, null,true, ileft);
											   	   					  :}
			| ID:i LEFTRECT  COLON RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 				RESULT = new StructuredTypePositionExpression(id, null, null, null,true, ileft);
											   	   					  					 :}
			| ID:i LEFTRECT  COLON COLON expression:f RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, null, null, f,true, ileft);
											   	   					  					 :}
			| ID:i LEFTRECT  COLON expression:s COLON expression:f RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i,ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, null, s, f,true, ileft);
											   	   					  					 :}
			| ID:i LEFTRECT expression:s COLON COLON expression:f RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, s, null, f,true, ileft);
											   	   					  					 :}
			| ID:i LEFTRECT expression:s COLON expression:e COLON expression:f RIGHTRECT {: IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, s, e, f,true, ileft);
											   	   					  					 :}
			| ID:i DOT ID:func LEFTPARENTHESE arguments:params RIGHTPARENTHESE {: 	IdentifierExpression id = new IdentifierExpression(i, ileft);
																					RESULT = new MethodCallExpression(id,func,(List<Expression>)params,ileft); 
																			   :};


map_expression ::= LEFTLLAVE:l expression_map_list:list RIGHTLLAVE {: RESULT = new DictionaryExpression((Map<Expression,Expression>)list, lleft); :}
				| LEFTLLAVE:l NEWLINE expression_map_list:list RIGHTLLAVE {: RESULT = new DictionaryExpression((Map<Expression,Expression>)list, lleft); :};

expression_map_list ::= expression:key COLON expression:val COMMA NEWLINE expression_map_list:list {: ((Map<Expression,Expression>)list).put((Expression)key,(Expression)val);
																									  RESULT = list;
																									:} 
					| expression:key COLON expression:val COMMA expression_map_list:list {: ((Map<Expression,Expression>)list).put((Expression)key,(Expression)val);
																							RESULT = list;
																						  :}
					|expression:key COLON expression:val {: Map<Expression, Expression> map = new HashMap<Expression, Expression>();
															map.put(key,val);
															RESULT = map;
														 :}
					|expression:key COLON expression:val NEWLINE {: Map<Expression, Expression> map = new HashMap<Expression, Expression>();
															map.put(key,val);
															RESULT = map;
														 :}
					| /*epsilon*/{: RESULT = new HashMap<Expression, Expression>(); :};

tuple_expression ::= LEFTPARENTHESE:l expression:e COMMA expression_tuple_list:list RIGHTPARENTHESE {: ((ArrayList<Expression>)list).add(0,e); 
																									RESULT = new TupleExpression((ArrayList<Expression>)list, lleft); 
																								  :}
					| LEFTPARENTHESE:l RIGHTPARENTHESE {: ArrayList<Expression> tuple = new ArrayList<>();
														RESULT = new TupleExpression(tuple, lleft);
													 :};

expression_tuple_list ::= expression:e COMMA expression_tuple_list:list {: ((ArrayList<Expression>)list).add(0,e);
																		    RESULT = list;
																		:}
						| expression:e {: ArrayList<Expression> tuple = new ArrayList<>();
										  tuple.add(0,e);
										  RESULT = tuple;
									   :}
						| /* epsilon */ {: RESULT = new ArrayList<Expression>(); :};

list_expression ::= LEFTRECT:l expression_list_list:list RIGHTRECT {: RESULT = new ListExpression((ArrayList<Expression>)list, lleft); 
																								  :}
					| LEFTRECT:l RIGHTRECT {: ArrayList<Expression> list = new ArrayList<>();
														RESULT = new ListExpression(list, lleft);
													 :};

expression_list_list ::= expression_list_list:list COMMA expression:e   {: ((ArrayList<Expression>)list).add(e);
																		    RESULT = list;
																		:}
						| expression:e {: ArrayList<Expression> lista = new ArrayList<>();
										  lista.add(e);
										  RESULT = lista;
									   :};


compound_statement ::= IF expression:e COLON block:i ELSE COLON block:b {: RESULT = new IfStatement(e, (List<Statement>) i,(List<Statement>) b, eleft ); :}
					   | IF expression:e COLON block:b {: RESULT = new IfStatement(e, (List<Statement>) b, null, eleft); :}
					   | WHILE expression:e COLON block:b {: setContinueFlag(false);
															 setBreakFlag(false); 
					   										 RESULT = new WhileStatement(e, (List<Statement>) b, eleft); 
					   									  :}
					   | FOR ID:var IN expression:exp COLON block:b {: RESULT = new ForStatement(var, exp, (List<Statement>)b, bleft); :}
					   | DEF ID:i function_parameters:list COLON block:b {:  setReturnFlag(false);
					   														 IdentifierExpression id = new IdentifierExpression(i, ileft);
					   			 											 RESULT = new FunctionStatement(id, (List<IdentifierExpression>) list, (BlockStatement) b);
					   													 :};
					   
stmt_list ::= simple_statement:stmt simple_stmt_semicolon_list:list {: 	((List<Statement>)list).add((Statement)stmt); 
																		RESULT = list;
																	:};
																	
simple_stmt_semicolon_list ::= SEMICOLON simple_statement:stmt simple_stmt_semicolon_list:list {: 
																									((List<Statement>)list).add((Statement)stmt); 
																									RESULT = list;
																							   :}
							   | 
							   /*epsilon*/											
							   {:
							    	RESULT = new LinkedList<Statement>(); 
							   :};
							    
statement ::= stmt_list:list NEWLINE {: RESULT = list;
									 :}
			  | compound_statement:stmt {:	List<Statement> list = new LinkedList<Statement>();
											list.add((Statement)stmt);
											RESULT = list;
										:};
										
block ::= stmt_list:list NEWLINE {: RESULT = (List<Statement>)list;
 								 :}
		  | NEWLINE START_BLOCK statement_list:list END_BLOCK {: RESULT = (List<Statement>)list;	
		  	 										  		  :};
		  	 										  
statement_list ::= statement_list:list statement:stmt {:((List<Statement>)list).addAll((List<Statement>)stmt);
														RESULT = list;
													  :}
				   | statement : stmt {: List<Statement> list = new LinkedList<Statement>();
										list.addAll((List<Statement>)stmt);
										RESULT = list;
									  :};

function_parameters ::= LEFTPARENTHESE function_parameters_list:list RIGHTPARENTHESE {: RESULT = list; :};

function_parameters_list ::= ID:i COMMA function_parameters_list:list {: ((ArrayList<IdentifierExpression>)list).add(new IdentifierExpression(i,ileft));
																		 RESULT = list;
																	  :}
							 | ID:i {: ArrayList<IdentifierExpression> list = new ArrayList<>();
									   list.add(new IdentifierExpression(i,ileft));
									   RESULT = list;
									:}
							 | {: RESULT = new ArrayList<IdentifierExpression>(); :};
							 

arguments ::= /*epsilon*/{: RESULT = new ArrayList<Expression>(); :}
| argument_list:args {: RESULT = args; :};

argument_list ::= expression : e {: ArrayList<Expression> args = new ArrayList<Expression>();
									args.add(0,e);
									RESULT = args; :}
| expression:e COMMA argument_list:elems {: ((ArrayList<Expression>)elems).add(0,e);
											RESULT = elems; 
										 :};
								  
								  
