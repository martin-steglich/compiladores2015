package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.expression.*;
import com.language.model.statement.*;
import com.language.exceptions.*;

terminal String ID, INTEGER, LONG, FLOAT, STRING, TRUE, FALSE;

terminal String ASSIGN, PLUS, MINUS, MUL, DIV, EXP, INT_DIV, MOD;

terminal String AND_BIT, OR_BIT, XOR_BIT, NOT_BIT, LSHIFT_BIT, RSHIFT_BIT;

terminal String AND, OR, NOT, EQUALS, NOT_EQUALS, LESS_THAN, GREAT_THAN, LESSEQUAL_THAN, GREATEQUAL_THAN;

terminal String PRINT;

non terminal program, module, statement;
non terminal Expression expression;


precedence left PLUS, MINUS;
precedence left MUL, DIV, EXP, INT_DIV, MOD;
precedence left AND, OR, EQUALS, NOT_EQUALS, LESS_THAN, GREAT_THAN, LESSEQUAL_THAN, GREATEQUAL_THAN;
precedence left AND_BIT, OR_BIT, XOR_BIT, LSHIFT_BIT, RSHIFT_BIT;


statement ::= expression:e {: RESULT = e; :} 
			| ID:i ASSIGN expression:e {: RESULT = new AssignStatement(i, (Expression)e); :}
			| PRINT:p expression:e {: RESULT = new PrintStatement((Expression) e); :};

expression ::= INTEGER:i {: RESULT = new IntegerExpression(Integer.valueOf(i)); :}
			| STRING:s {: RESULT = new StringExpression(s); :}
			| LONG:l {: RESULT = new LongExpression(Long.valueOf(l)); :}
			| FLOAT:f {: RESULT = new FloatExpression(Float.valueOf(f)); :}
			| TRUE:b {: RESULT = new BooleanExpression(true); :}
			| FALSE:b {: RESULT = new BooleanExpression(false); :}
			| expression:l PLUS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "+", (Expression)r) ;:}
			| expression:l MINUS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "-", (Expression)r) ;:}
			| expression:l DIV expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "/", (Expression)r) ;:}
			| expression:l MUL expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "*", (Expression)r) ;:}
			| expression:l EXP expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "**", (Expression)r) ;:}
			| expression:l INT_DIV expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "//", (Expression)r) ;:}
			| expression:l MOD expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "%", (Expression)r) ;:}
			| expression:l AND expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "and", (Expression)r) ;:}
			| expression:l OR expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "or", (Expression)r) ;:}
			| expression:l EQUALS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "==", (Expression)r) ;:}
			| expression:l NOT_EQUALS expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "!=", (Expression)r) ;:}
			| expression:l LESS_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<", (Expression)r) ;:}
			| expression:l LESSEQUAL_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<=", (Expression)r) ;:}
			| expression:l GREAT_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">", (Expression)r) ;:}
			| expression:l GREATEQUAL_THAN expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">=", (Expression)r) ;:}
			| expression:l AND_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "&", (Expression)r) ;:}
			| expression:l OR_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "|", (Expression)r) ;:}
			| expression:l XOR_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "^", (Expression)r) ;:}
			| expression:l LSHIFT_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, "<<", (Expression)r) ;:}
			| expression:l RSHIFT_BIT expression:r {: RESULT = new BinaryOperationExpression((Expression)l, ">>", (Expression)r) ;:}
			| MINUS expression:e {: RESULT = (Expression)e; :}
			| NOT_BIT expression:e {: RESULT = (Expression)e; :}
			| NOT expression:e {: RESULT = (Expression)e; :};			




