/* The following code was generated by JFlex 1.4.1 on 7/11/15 2:22 PM */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import java.util.Stack;
import com.language.exceptions.*;
import com.language.model.expression.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/11/15 2:22 PM from the specification file
 * <tt>C:/Users/Tincho/workspace/compiladores2015/Compilador/language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SIMPLE_QUOTE_TRIPLE_STRING = 6;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_TRIPLE_STRING = 5;
  public static final int DOUBLE_QUOTE_ONCE_STRING = 3;
  public static final int NORMAL_STATE = 2;
  public static final int INDENT_STATE = 1;
  public static final int SIMPLE_QUOTE_ONCE_STRING = 4;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\2\1\0\1\3\1\1\22\0\1\12\1\37\1\57"+
    "\1\14\1\0\1\23\1\24\1\56\1\52\1\53\1\21\1\17\1\55"+
    "\1\20\1\6\1\22\3\4\1\61\6\4\1\51\1\54\1\27\1\16"+
    "\1\30\2\0\4\13\1\10\1\45\5\13\1\5\7\13\1\43\6\13"+
    "\1\0\1\62\1\0\1\25\1\13\1\0\1\31\2\13\1\33\1\7"+
    "\1\50\2\13\1\41\2\13\1\46\1\13\1\32\1\34\1\40\1\13"+
    "\1\35\1\47\1\36\1\44\3\13\1\42\1\13\1\60\1\11\1\60"+
    "\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\1\10\1\11\1\12\1\1\1\12\1\13\1\10\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\5\12\1\1\4\12\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\2\40\2\1"+
    "\1\41\1\42\1\0\1\12\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\3\12\1\52\1\12\1\53\1\12"+
    "\1\54\2\12\2\0\1\55\1\56\1\57\1\60\1\61"+
    "\3\0\1\12\1\62\1\63\1\64\4\12\1\65\1\66"+
    "\1\67\1\42\1\70\1\71\1\12\1\72\1\12\1\73"+
    "\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0165\0\u0198\0\u0165\0\u0165\0\u0165\0\u0165\0\u01cb\0\u0165"+
    "\0\u0165\0\u01fe\0\u0231\0\u0264\0\u0297\0\u0165\0\u02ca\0\u02fd"+
    "\0\u0165\0\u0165\0\u0330\0\u0363\0\u0165\0\u0165\0\u0165\0\u0165"+
    "\0\u0396\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb"+
    "\0\u052e\0\u0561\0\u0594\0\u05c7\0\u0165\0\u0165\0\u0165\0\u0165"+
    "\0\u0165\0\u05fa\0\u062d\0\u0165\0\u0165\0\u0660\0\u0693\0\u06c6"+
    "\0\u06f9\0\u0165\0\u072c\0\u075f\0\u0792\0\u0165\0\u0165\0\u0165"+
    "\0\u0165\0\u0165\0\u0165\0\u0165\0\u07c5\0\u07f8\0\u082b\0\u0231"+
    "\0\u085e\0\u0165\0\u0891\0\u0231\0\u08c4\0\u08f7\0\u092a\0\u095d"+
    "\0\u0165\0\u0165\0\u0165\0\u0165\0\u0165\0\u0990\0\u09c3\0\u09f6"+
    "\0\u0a29\0\u0231\0\u0231\0\u0231\0\u0a5c\0\u0a8f\0\u0ac2\0\u0af5"+
    "\0\u0165\0\u0165\0\u0165\0\u09f6\0\u0231\0\u0231\0\u0b28\0\u0231"+
    "\0\u0b5b\0\u0231\0\u0231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\10\1\0\60\10\1\11\1\12\1\13\1\14\6\11"+
    "\1\15\2\11\1\16\45\11\1\10\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\23\1\26\1\21\1\23"+
    "\1\27\1\21\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\23\1\47\1\50\1\51\1\52\1\23\1\53"+
    "\1\23\1\54\3\23\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\10\1\22\1\10\2\64\1\0\54\64"+
    "\1\65\2\64\1\66\2\64\1\0\53\64\1\65\3\64"+
    "\1\67\57\64\1\70\2\10\57\64\1\71\1\64\2\10"+
    "\1\64\65\0\1\13\62\0\1\20\64\0\1\22\1\72"+
    "\1\73\2\74\50\0\1\22\5\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\6\23\1\0\11\23\10\0\1\23"+
    "\5\0\1\73\54\0\1\73\5\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\6\23\1\0\6\23\1\75\2\23"+
    "\10\0\1\23\1\0\2\27\1\0\60\27\16\0\1\76"+
    "\65\0\1\77\63\0\1\100\56\0\1\101\10\0\1\102"+
    "\51\0\1\103\11\0\1\104\36\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\1\23\1\105\4\23\1\0\11\23"+
    "\10\0\1\23\5\0\2\23\1\0\2\23\2\0\1\23"+
    "\15\0\3\23\1\106\2\23\1\0\11\23\10\0\1\23"+
    "\5\0\2\23\1\0\1\107\1\23\2\0\1\23\15\0"+
    "\6\23\1\0\11\23\10\0\1\23\5\0\2\23\1\0"+
    "\2\23\2\0\1\23\15\0\4\23\1\110\1\23\1\0"+
    "\11\23\10\0\1\23\5\0\2\23\1\0\2\23\2\0"+
    "\1\23\15\0\6\23\1\0\2\23\1\111\6\23\10\0"+
    "\1\23\17\0\1\112\50\0\2\23\1\0\2\23\2\0"+
    "\1\23\15\0\4\23\1\113\1\23\1\0\11\23\10\0"+
    "\1\23\5\0\2\23\1\0\2\23\2\0\1\23\15\0"+
    "\6\23\1\0\10\23\1\114\10\0\1\23\5\0\2\23"+
    "\1\0\2\23\2\0\1\23\15\0\4\23\1\115\1\23"+
    "\1\0\11\23\10\0\1\23\5\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\1\116\5\23\1\0\11\23\10\0"+
    "\1\23\57\0\1\117\63\0\1\120\35\0\1\121\2\0"+
    "\1\122\1\123\20\0\1\124\35\0\1\121\2\0\1\122"+
    "\1\123\17\0\1\125\63\0\1\126\61\0\1\127\10\0"+
    "\1\73\2\0\2\74\50\0\1\73\12\0\2\130\4\0"+
    "\2\130\46\0\2\23\1\0\2\23\2\0\1\23\15\0"+
    "\6\23\1\0\7\23\1\131\1\23\10\0\1\23\5\0"+
    "\2\23\1\0\2\23\2\0\1\23\15\0\2\23\1\132"+
    "\3\23\1\0\11\23\10\0\1\23\5\0\2\23\1\0"+
    "\2\23\2\0\1\23\15\0\5\23\1\133\1\0\11\23"+
    "\10\0\1\23\5\0\2\23\1\0\2\23\2\0\1\23"+
    "\15\0\6\23\1\0\10\23\1\134\10\0\1\23\5\0"+
    "\2\23\1\0\2\23\2\0\1\23\15\0\6\23\1\0"+
    "\1\135\10\23\10\0\1\23\5\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\6\23\1\0\1\23\1\136\7\23"+
    "\10\0\1\23\5\0\2\23\1\0\2\23\2\0\1\23"+
    "\15\0\6\23\1\0\4\23\1\137\4\23\10\0\1\23"+
    "\5\0\2\23\1\0\2\23\2\0\1\23\15\0\6\23"+
    "\1\0\6\23\1\140\2\23\10\0\1\23\57\0\1\141"+
    "\63\0\1\142\62\0\1\143\61\0\1\143\10\0\1\144"+
    "\54\0\1\144\5\0\2\23\1\0\1\145\1\23\2\0"+
    "\1\23\15\0\6\23\1\0\11\23\10\0\1\23\5\0"+
    "\2\23\1\0\1\146\1\23\2\0\1\23\15\0\6\23"+
    "\1\0\11\23\10\0\1\23\5\0\2\23\1\0\2\23"+
    "\2\0\1\23\15\0\1\23\1\147\4\23\1\0\11\23"+
    "\10\0\1\23\5\0\2\23\1\0\1\150\1\23\2\0"+
    "\1\23\15\0\6\23\1\0\11\23\10\0\1\23\5\0"+
    "\2\23\1\0\2\23\2\0\1\23\15\0\6\23\1\0"+
    "\7\23\1\151\1\23\10\0\1\23\5\0\2\23\1\0"+
    "\2\23\2\0\1\23\15\0\5\23\1\152\1\0\11\23"+
    "\10\0\1\23\5\0\2\23\1\0\1\153\1\23\2\0"+
    "\1\23\15\0\6\23\1\0\11\23\10\0\1\23\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2958];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\11\1\1\4\11\1\1\2\11\4\1\1\11"+
    "\2\1\2\11\2\1\4\11\14\1\5\11\2\1\2\11"+
    "\4\1\1\11\1\1\1\0\1\1\7\11\5\1\1\11"+
    "\4\1\2\0\5\11\3\0\10\1\3\11\10\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[107];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
		
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	private static final int TAB_LENGTH = 4;
	
	Stack<Integer> stack = new Stack<Integer>();
   	private int current_indent;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
          this.stack.push(0);
        current_indent = 0;
        yybegin(INDENT_STATE);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 144) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { /* ignore */
          }
        case 61: break;
        case 34: 
          { return new Symbol(sym.FLOAT, yyline, yycolumn, yytext());
          }
        case 62: break;
        case 54: 
          { string.setLength(0);
								yybegin(DOUBLE_QUOTE_TRIPLE_STRING);
          }
        case 63: break;
        case 20: 
          { return symbol(sym.NOT_BIT);
          }
        case 64: break;
        case 33: 
          { return new Symbol(sym.LONG, yyline, yycolumn, yytext());
          }
        case 65: break;
        case 47: 
          { string.append('\t');
          }
        case 66: break;
        case 25: 
          { return symbol(sym.RIGHTPARENTHESE);
          }
        case 67: break;
        case 6: 
          { current_indent = current_indent + TAB_LENGTH;
          }
        case 68: break;
        case 51: 
          { return symbol(sym.NOT);
          }
        case 69: break;
        case 50: 
          { return symbol(sym.AND);
          }
        case 70: break;
        case 2: 
          { yypushback(1);
                                 	if (current_indent > stack.peek()){
                                    	stack.push(current_indent);
                                      	yybegin(NORMAL_STATE);
                                 		return symbol(sym.START_BLOCK);
                                     }
                                     else if (current_indent == stack.peek()){
                                      	yybegin(NORMAL_STATE);
                                     }
                                     else{
                                     	int tmp = stack.pop();
                                      	return symbol(sym.END_BLOCK);
                                     }
          }
        case 71: break;
        case 32: 
          { string.append('\\');
          }
        case 72: break;
        case 35: 
          { return symbol(sym.EQUALS);
          }
        case 73: break;
        case 46: 
          { string.append('\r');
          }
        case 74: break;
        case 39: 
          { return symbol(sym.LSHIFT_BIT);
          }
        case 75: break;
        case 7: 
          { yybegin(INDENT_STATE);
                                current_indent = 0;
                                return symbol(sym.NEWLINE);
          }
        case 76: break;
        case 38: 
          { return symbol(sym.LESSEQUAL_THAN);
          }
        case 77: break;
        case 5: 
          { current_indent++;
          }
        case 78: break;
        case 58: 
          { return symbol(sym.TRUE);
          }
        case 79: break;
        case 19: 
          { return symbol(sym.XOR_BIT);
          }
        case 80: break;
        case 22: 
          { return symbol(sym.GREAT_THAN);
          }
        case 81: break;
        case 57: 
          { return symbol(sym.TYPE);
          }
        case 82: break;
        case 56: 
          { return symbol(sym.ELSE);
          }
        case 83: break;
        case 53: 
          { string.setLength(0);
								yybegin(SIMPLE_QUOTE_TRIPLE_STRING);
          }
        case 84: break;
        case 48: 
          { string.append('\"');
          }
        case 85: break;
        case 23: 
          { return symbol(sym.COLON);
          }
        case 86: break;
        case 52: 
          { return symbol(sym.DEF);
          }
        case 87: break;
        case 18: 
          { return symbol(sym.AND_BIT);
          }
        case 88: break;
        case 36: 
          { return new Symbol(sym.EXP, yyline, yycolumn, yytext());
          }
        case 89: break;
        case 13: 
          { return new Symbol(sym.PLUS, yyline, yycolumn, yytext());
          }
        case 90: break;
        case 49: 
          { string.append('\'');
          }
        case 91: break;
        case 44: 
          { return symbol(sym.IF);
          }
        case 92: break;
        case 4: 
          { /*Ignore whitespace*/
          }
        case 93: break;
        case 17: 
          { return new Symbol(sym.MOD, yyline, yycolumn, yytext());
          }
        case 94: break;
        case 55: 
          { yybegin(NORMAL_STATE); 
								return new Symbol(sym.STRING, yyline, yycolumn, string.toString());
          }
        case 95: break;
        case 41: 
          { return symbol(sym.RSHIFT_BIT);
          }
        case 96: break;
        case 10: 
          { return new Symbol(sym.ID, yyline, yycolumn, yytext());
          }
        case 97: break;
        case 11: 
          { return symbol(sym.OR_BIT);
          }
        case 98: break;
        case 16: 
          { return new Symbol(sym.DIV, yyline, yycolumn, yytext());
          }
        case 99: break;
        case 40: 
          { return symbol(sym.GREATEQUAL_THAN);
          }
        case 100: break;
        case 42: 
          { return symbol(sym.OR);
          }
        case 101: break;
        case 29: 
          { string.setLength(0);
								yybegin(DOUBLE_QUOTE_ONCE_STRING);
          }
        case 102: break;
        case 26: 
          { return symbol(sym.SEMICOLON);
          }
        case 103: break;
        case 45: 
          { string.append('\n');
          }
        case 104: break;
        case 3: 
          { if (current_indent > stack.peek()){
										stack.push(current_indent);
                                       	yybegin(NORMAL_STATE);
                                      	return symbol(sym.START_BLOCK);
                                  	}
                                    else if (current_indent == stack.peek()){
                                    	yybegin(NORMAL_STATE);
                                    }
                                    else{
                               			yypushback(1);
                                      	int tmp = stack.pop();
                                      	return symbol(sym.END_BLOCK);
                                    }
          }
        case 105: break;
        case 30: 
          { string.append(yytext());
          }
        case 106: break;
        case 28: 
          { string.setLength(0);
								yybegin(SIMPLE_QUOTE_ONCE_STRING);
          }
        case 107: break;
        case 12: 
          { return new Symbol(sym.ASSIGN, yyline, yycolumn, "=");
          }
        case 108: break;
        case 24: 
          { return symbol(sym.LEFTPARENTHESE);
          }
        case 109: break;
        case 59: 
          { return symbol(sym.PRINT);
          }
        case 110: break;
        case 14: 
          { return new Symbol(sym.MINUS, yyline, yycolumn, yytext());
          }
        case 111: break;
        case 31: 
          { yybegin(NORMAL_STATE);
								return new Symbol(sym.STRING, yyline, yycolumn, string.toString());
          }
        case 112: break;
        case 37: 
          { return new Symbol(sym.INT_DIV, yyline, yycolumn, yytext());
          }
        case 113: break;
        case 1: 
          { throw new ParsingException(yyline, yycolumn, "No se reconoce lexicograficamente el caracter: " + yytext());
          }
        case 114: break;
        case 27: 
          { return symbol(sym.COMMA);
          }
        case 115: break;
        case 43: 
          { return symbol(sym.NOT_EQUALS);
          }
        case 116: break;
        case 15: 
          { return new Symbol(sym.MUL, yyline, yycolumn, yytext());
          }
        case 117: break;
        case 21: 
          { return symbol(sym.LESS_THAN);
          }
        case 118: break;
        case 60: 
          { return symbol(sym.FALSE);
          }
        case 119: break;
        case 9: 
          { return symbol(sym.INTEGER, yytext());
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
