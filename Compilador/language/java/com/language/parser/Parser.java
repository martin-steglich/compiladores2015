
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 15 20:37:05 UYT 2015
//----------------------------------------------------

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import com.language.model.program.*;
import com.language.model.expression.*;
import com.language.model.statement.*;
import com.language.exceptions.*;
import java.util.LinkedList;
import java.util.List;
import java.util.Collections;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 15 20:37:05 UYT 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\002\000\002\005\004\000\002\005\002\000" +
    "\002\006\003\000\002\006\005\000\002\006\004\000\002" +
    "\006\006\000\002\006\003\000\002\006\003\000\002\006" +
    "\010\000\002\006\004\000\002\014\003\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\004\000\002\014\004\000\002\014\004\000" +
    "\002\014\006\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\006\000\002\014\007\000\002\014" +
    "\007\000\002\014\010\000\002\014\006\000\002\014\010" +
    "\000\002\014\011\000\002\014\011\000\002\014\012\000" +
    "\002\014\010\000\002\015\005\000\002\015\006\000\002" +
    "\020\010\000\002\020\007\000\002\020\005\000\002\020" +
    "\006\000\002\020\002\000\002\016\007\000\002\016\004" +
    "\000\002\021\005\000\002\021\003\000\002\021\002\000" +
    "\002\017\005\000\002\017\004\000\002\022\005\000\002" +
    "\022\003\000\002\007\011\000\002\007\006\000\002\007" +
    "\006\000\002\007\010\000\002\007\007\000\002\010\004" +
    "\000\002\011\005\000\002\011\002\000\002\012\004\000" +
    "\002\012\003\000\002\023\004\000\002\023\006\000\002" +
    "\013\004\000\002\013\003\000\002\024\005\000\002\025" +
    "\005\000\002\025\003\000\002\025\002\000\002\026\002" +
    "\000\002\026\003\000\002\027\003\000\002\027\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\064\002\ufffb\004\023\005\041\006\007\007" +
    "\027\010\026\011\017\012\035\015\037\026\006\033\015" +
    "\042\040\043\025\044\046\045\036\050\020\052\031\053" +
    "\014\054\044\056\043\063\032\064\011\065\033\067\013" +
    "\072\016\001\002\000\136\002\uffd0\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\014\uffd0\015\uffd0" +
    "\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0" +
    "\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\062\uffd0\063\uffd0\064\uffd0\065\uffd0\066" +
    "\uffd0\067\uffd0\070\uffd0\072\uffd0\001\002\000\136\002\uffcf" +
    "\004\uffcf\005\uffcf\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012" +
    "\uffcf\014\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf\030" +
    "\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf" +
    "\064\uffcf\065\uffcf\066\uffcf\067\uffcf\070\uffcf\072\uffcf\001" +
    "\002\000\036\004\050\005\041\006\007\007\027\010\026" +
    "\011\017\012\035\015\037\026\006\033\015\044\046\056" +
    "\043\065\033\067\013\001\002\000\136\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\032\uffee\033\uffee\034\uffee\035\uffee\036\uffee\037\uffee" +
    "\040\uffee\041\uffee\042\uffee\043\uffee\044\uffee\045\uffee\056" +
    "\uffee\057\uffee\060\uffee\061\uffee\062\uffee\063\uffee\064\uffee" +
    "\065\uffee\066\uffee\067\uffee\070\uffee\072\uffee\001\002\000" +
    "\004\002\001\001\002\000\056\002\ufff3\004\ufff3\005\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\015\ufff3\026" +
    "\ufff3\033\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\056\ufff3" +
    "\061\ufff3\063\ufff3\064\ufff3\065\ufff3\067\ufff3\072\ufff3\001" +
    "\002\000\064\002\ufffb\004\023\005\041\006\007\007\027" +
    "\010\026\011\017\012\035\015\037\026\006\033\015\042" +
    "\040\043\025\044\046\045\036\050\020\052\031\053\014" +
    "\054\044\056\043\063\032\064\011\065\033\067\013\072" +
    "\016\001\002\000\040\004\050\005\041\006\007\007\027" +
    "\010\026\011\017\012\035\015\037\026\006\033\015\044" +
    "\046\056\043\065\033\067\013\070\306\001\002\000\036" +
    "\004\050\005\041\006\007\007\027\010\026\011\017\012" +
    "\035\015\037\026\006\033\015\044\046\056\043\065\033" +
    "\067\013\001\002\000\036\004\050\005\041\006\007\007" +
    "\027\010\026\011\017\012\035\015\037\026\006\033\015" +
    "\044\046\056\043\065\033\067\013\001\002\000\036\004" +
    "\050\005\041\006\007\007\027\010\026\011\017\012\035" +
    "\015\037\026\006\033\015\044\046\056\043\065\033\067" +
    "\013\001\002\000\136\002\uffec\004\uffec\005\uffec\006\uffec" +
    "\007\uffec\010\uffec\011\uffec\012\uffec\014\uffec\015\uffec\016" +
    "\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023\uffec\024\uffec" +
    "\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec" +
    "\042\uffec\043\uffec\044\uffec\045\uffec\056\uffec\057\uffec\060" +
    "\uffec\061\uffec\062\uffec\063\uffec\064\uffec\065\uffec\066\uffec" +
    "\067\uffec\070\uffec\072\uffec\001\002\000\036\004\050\005" +
    "\041\006\007\007\027\010\026\011\017\012\035\015\037" +
    "\026\006\033\015\044\046\056\043\065\033\067\013\001" +
    "\002\000\066\002\uffaa\004\uffaa\005\uffaa\006\uffaa\007\uffaa" +
    "\010\uffaa\011\uffaa\012\uffaa\015\uffaa\026\uffaa\033\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\045\uffaa\047\uffaa\050\uffaa\052\uffaa" +
    "\053\uffaa\054\uffaa\056\uffaa\063\uffaa\064\uffaa\065\uffaa\067" +
    "\uffaa\072\uffaa\001\002\000\004\002\266\001\002\000\130" +
    "\002\uffea\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\260\014\uffea\015\uffea\016\uffea\017\uffea" +
    "\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\056\uffea\061\uffea\063\uffea\064\uffea" +
    "\065\uffea\067\257\071\124\072\uffea\001\002\000\004\045" +
    "\256\001\002\000\004\056\253\001\002\000\136\002\uffef" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012" +
    "\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\021\uffef" +
    "\022\uffef\023\uffef\024\uffef\025\uffef\026\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\036\uffef" +
    "\037\uffef\040\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045" +
    "\uffef\056\uffef\057\uffef\060\uffef\061\uffef\062\uffef\063\uffef" +
    "\064\uffef\065\uffef\066\uffef\067\uffef\070\uffef\072\uffef\001" +
    "\002\000\136\002\uffed\004\uffed\005\uffed\006\uffed\007\uffed" +
    "\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed\016\uffed\017" +
    "\uffed\020\uffed\021\uffed\022\uffed\023\uffed\024\uffed\025\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\035\uffed\036\uffed\037\uffed\040\uffed\041\uffed\042\uffed" +
    "\043\uffed\044\uffed\045\uffed\056\uffed\057\uffed\060\uffed\061" +
    "\uffed\062\uffed\063\uffed\064\uffed\065\uffed\066\uffed\067\uffed" +
    "\070\uffed\072\uffed\001\002\000\124\002\ufff8\004\ufff8\005" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\014\054" +
    "\015\071\016\075\017\066\020\063\021\061\022\052\023" +
    "\076\024\073\025\056\026\ufff8\027\057\030\070\031\053" +
    "\032\055\033\ufff8\034\065\035\072\036\067\037\062\040" +
    "\064\041\060\042\ufff8\043\ufff8\044\ufff8\045\ufff8\056\ufff8" +
    "\061\ufff8\063\ufff8\064\ufff8\065\ufff8\067\ufff8\072\ufff8\001" +
    "\002\000\004\004\241\001\002\000\056\002\ufff4\004\ufff4" +
    "\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\015" +
    "\ufff4\026\ufff4\033\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4" +
    "\056\ufff4\061\ufff4\063\ufff4\064\ufff4\065\ufff4\067\ufff4\072" +
    "\ufff4\001\002\000\042\004\050\005\041\006\007\007\027" +
    "\010\026\011\017\012\035\015\037\026\006\033\015\044" +
    "\046\045\225\056\043\065\033\066\uffbd\067\013\001\002" +
    "\000\136\002\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010" +
    "\uffce\011\uffce\012\uffce\014\uffce\015\uffce\016\uffce\017\uffce" +
    "\020\uffce\021\uffce\022\uffce\023\uffce\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce" +
    "\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\045\uffce\056\uffce\057\uffce\060\uffce\061\uffce" +
    "\062\uffce\063\uffce\064\uffce\065\uffce\066\uffce\067\uffce\070" +
    "\uffce\072\uffce\001\002\000\136\002\uffeb\004\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\014\uffeb\015" +
    "\uffeb\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb" +
    "\024\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\056\uffeb\057" +
    "\uffeb\060\uffeb\061\uffeb\062\uffeb\063\uffeb\064\uffeb\065\uffeb" +
    "\066\uffeb\067\uffeb\070\uffeb\072\uffeb\001\002\000\064\002" +
    "\ufffb\004\023\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\042\040\043\025\044" +
    "\046\045\036\050\020\052\031\053\014\054\044\056\043" +
    "\063\032\064\011\065\033\067\013\072\016\001\002\000" +
    "\036\004\050\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\044\046\056\043\065" +
    "\033\067\013\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\136" +
    "\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011" +
    "\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0" +
    "\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0\026\ufff0\027" +
    "\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0" +
    "\036\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0\043\ufff0\044" +
    "\ufff0\045\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\062\ufff0" +
    "\063\ufff0\064\ufff0\065\ufff0\066\ufff0\067\ufff0\070\ufff0\072" +
    "\ufff0\001\002\000\004\002\ufffe\001\002\000\040\004\050" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\044\046\056\043\057\211\065\033" +
    "\067\013\001\002\000\004\004\172\001\002\000\056\002" +
    "\ufff9\004\023\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\042\040\043\025\044" +
    "\046\045\uffac\056\043\061\163\063\032\064\011\065\033" +
    "\067\013\072\016\001\002\000\004\056\047\001\002\000" +
    "\036\004\050\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\044\046\056\043\065" +
    "\033\067\013\001\002\000\140\002\uffea\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\011\uffea\012\uffea\014\uffea\015" +
    "\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea" +
    "\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\056\uffea\057" +
    "\uffea\060\uffea\061\uffea\062\uffea\063\uffea\064\uffea\065\uffea" +
    "\066\uffea\067\123\070\uffea\071\124\072\uffea\001\002\000" +
    "\054\014\054\015\071\016\075\017\066\020\063\021\061" +
    "\022\052\023\076\024\073\025\056\027\057\030\070\031" +
    "\053\032\055\034\065\035\072\036\067\037\062\040\064" +
    "\041\060\057\074\001\002\000\036\004\050\005\041\006" +
    "\007\007\027\010\026\011\017\012\035\015\037\026\006" +
    "\033\015\044\046\056\043\065\033\067\013\001\002\000" +
    "\036\004\050\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\044\046\056\043\065" +
    "\033\067\013\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\036" +
    "\004\050\005\041\006\007\007\027\010\026\011\017\012" +
    "\035\015\037\026\006\033\015\044\046\056\043\065\033" +
    "\067\013\001\002\000\036\004\050\005\041\006\007\007" +
    "\027\010\026\011\017\012\035\015\037\026\006\033\015" +
    "\044\046\056\043\065\033\067\013\001\002\000\036\004" +
    "\050\005\041\006\007\007\027\010\026\011\017\012\035" +
    "\015\037\026\006\033\015\044\046\056\043\065\033\067" +
    "\013\001\002\000\036\004\050\005\041\006\007\007\027" +
    "\010\026\011\017\012\035\015\037\026\006\033\015\044" +
    "\046\056\043\065\033\067\013\001\002\000\036\004\050" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\044\046\056\043\065\033\067\013" +
    "\001\002\000\036\004\050\005\041\006\007\007\027\010" +
    "\026\011\017\012\035\015\037\026\006\033\015\044\046" +
    "\056\043\065\033\067\013\001\002\000\036\004\050\005" +
    "\041\006\007\007\027\010\026\011\017\012\035\015\037" +
    "\026\006\033\015\044\046\056\043\065\033\067\013\001" +
    "\002\000\036\004\050\005\041\006\007\007\027\010\026" +
    "\011\017\012\035\015\037\026\006\033\015\044\046\056" +
    "\043\065\033\067\013\001\002\000\036\004\050\005\041" +
    "\006\007\007\027\010\026\011\017\012\035\015\037\026" +
    "\006\033\015\044\046\056\043\065\033\067\013\001\002" +
    "\000\036\004\050\005\041\006\007\007\027\010\026\011" +
    "\017\012\035\015\037\026\006\033\015\044\046\056\043" +
    "\065\033\067\013\001\002\000\036\004\050\005\041\006" +
    "\007\007\027\010\026\011\017\012\035\015\037\026\006" +
    "\033\015\044\046\056\043\065\033\067\013\001\002\000" +
    "\036\004\050\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\044\046\056\043\065" +
    "\033\067\013\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\036" +
    "\004\050\005\041\006\007\007\027\010\026\011\017\012" +
    "\035\015\037\026\006\033\015\044\046\056\043\065\033" +
    "\067\013\001\002\000\036\004\050\005\041\006\007\007" +
    "\027\010\026\011\017\012\035\015\037\026\006\033\015" +
    "\044\046\056\043\065\033\067\013\001\002\000\136\002" +
    "\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\012\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\030\uffd1\031\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\uffd1\037\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\045\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\062\uffd1\063" +
    "\uffd1\064\uffd1\065\uffd1\066\uffd1\067\uffd1\070\uffd1\072\uffd1" +
    "\001\002\000\036\004\050\005\041\006\007\007\027\010" +
    "\026\011\017\012\035\015\037\026\006\033\015\044\046" +
    "\056\043\065\033\067\013\001\002\000\036\004\050\005" +
    "\041\006\007\007\027\010\026\011\017\012\035\015\037" +
    "\026\006\033\015\044\046\056\043\065\033\067\013\001" +
    "\002\000\136\002\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9" +
    "\010\uffd9\011\uffd9\012\uffd9\014\uffd9\015\uffd9\016\uffd9\017" +
    "\uffd9\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9" +
    "\026\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\042\uffd9" +
    "\043\uffd9\044\uffd9\045\uffd9\056\uffd9\057\uffd9\060\uffd9\061" +
    "\uffd9\062\uffd9\063\uffd9\064\uffd9\065\uffd9\066\uffd9\067\uffd9" +
    "\070\uffd9\072\uffd9\001\002\000\136\002\uffe5\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5" +
    "\015\uffe5\016\uffe5\017\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\076\024\073\025\056\026\uffe5\027\057\030\070\031\uffe5" +
    "\032\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\056\uffe5" +
    "\057\uffe5\060\uffe5\061\uffe5\062\uffe5\063\uffe5\064\uffe5\065" +
    "\uffe5\066\uffe5\067\uffe5\070\uffe5\072\uffe5\001\002\000\136" +
    "\002\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011" +
    "\uffd8\012\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027" +
    "\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\042\uffd8\043\uffd8\044" +
    "\uffd8\045\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\062\uffd8" +
    "\063\uffd8\064\uffd8\065\uffd8\066\uffd8\067\uffd8\070\uffd8\072" +
    "\uffd8\001\002\000\136\002\uffde\004\uffde\005\uffde\006\uffde" +
    "\007\uffde\010\uffde\011\uffde\012\uffde\014\054\015\071\016" +
    "\075\017\066\020\063\021\061\022\052\023\076\024\073" +
    "\025\056\026\uffde\027\057\030\070\031\uffde\032\uffde\033" +
    "\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040\uffde\041\uffde" +
    "\042\uffde\043\uffde\044\uffde\045\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\062\uffde\063\uffde\064\uffde\065\uffde\066\uffde" +
    "\067\uffde\070\uffde\072\uffde\001\002\000\136\002\uffe7\004" +
    "\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012\uffe7" +
    "\014\uffe7\015\uffe7\016\075\017\066\020\063\021\061\022" +
    "\052\023\076\024\073\025\056\026\uffe7\027\057\030\070" +
    "\031\uffe7\032\uffe7\033\uffe7\034\uffe7\035\uffe7\036\uffe7\037" +
    "\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\056\uffe7\057\uffe7\060\uffe7\061\uffe7\062\uffe7\063\uffe7\064" +
    "\uffe7\065\uffe7\066\uffe7\067\uffe7\070\uffe7\072\uffe7\001\002" +
    "\000\136\002\uffd5\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010" +
    "\uffd5\011\uffd5\012\uffd5\014\uffd5\015\uffd5\016\uffd5\017\uffd5" +
    "\020\uffd5\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026" +
    "\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043" +
    "\uffd5\044\uffd5\045\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\062\uffd5\063\uffd5\064\uffd5\065\uffd5\066\uffd5\067\uffd5\070" +
    "\uffd5\072\uffd5\001\002\000\136\002\uffdd\004\uffdd\005\uffdd" +
    "\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\014\054\015" +
    "\071\016\075\017\066\020\063\021\061\022\052\023\076" +
    "\024\073\025\056\026\uffdd\027\057\030\070\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\062\uffdd\063\uffdd\064\uffdd\065\uffdd" +
    "\066\uffdd\067\uffdd\070\uffdd\072\uffdd\001\002\000\136\002" +
    "\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\076\024\073\025\056\026\uffe6\027\057" +
    "\030\070\031\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\062\uffe6\063" +
    "\uffe6\064\uffe6\065\uffe6\066\uffe6\067\uffe6\070\uffe6\072\uffe6" +
    "\001\002\000\136\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007" +
    "\uffdf\010\uffdf\011\uffdf\012\uffdf\014\054\015\071\016\075" +
    "\017\066\020\063\021\061\022\052\023\076\024\073\025" +
    "\056\026\uffdf\027\057\030\070\031\uffdf\032\uffdf\033\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\056\uffdf\057\uffdf\060\uffdf" +
    "\061\uffdf\062\uffdf\063\uffdf\064\uffdf\065\uffdf\066\uffdf\067" +
    "\uffdf\070\uffdf\072\uffdf\001\002\000\136\002\uffdc\004\uffdc" +
    "\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\014" +
    "\054\015\071\016\075\017\066\020\063\021\061\022\052" +
    "\023\076\024\073\025\056\026\uffdc\027\057\030\070\031" +
    "\uffdc\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc" +
    "\040\uffdc\041\uffdc\042\uffdc\043\uffdc\044\uffdc\045\uffdc\056" +
    "\uffdc\057\uffdc\060\uffdc\061\uffdc\062\uffdc\063\uffdc\064\uffdc" +
    "\065\uffdc\066\uffdc\067\uffdc\070\uffdc\072\uffdc\001\002\000" +
    "\136\002\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\011\uffe4\012\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020" +
    "\uffe4\021\uffe4\022\uffe4\023\076\024\073\025\056\026\uffe4" +
    "\027\057\030\070\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035" +
    "\uffe4\036\uffe4\037\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4" +
    "\044\uffe4\045\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062" +
    "\uffe4\063\uffe4\064\uffe4\065\uffe4\066\uffe4\067\uffe4\070\uffe4" +
    "\072\uffe4\001\002\000\136\002\uffdb\004\uffdb\005\uffdb\006" +
    "\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\014\054\015\071" +
    "\016\075\017\066\020\063\021\061\022\052\023\076\024" +
    "\073\025\056\026\uffdb\027\057\030\070\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\062\uffdb\063\uffdb\064\uffdb\065\uffdb\066" +
    "\uffdb\067\uffdb\070\uffdb\072\uffdb\001\002\000\136\002\uffe3" +
    "\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\014\uffe3\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\023\076\024\073\025\056\026\uffe3\027\057\030" +
    "\070\031\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\036\uffe3" +
    "\037\uffe3\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045" +
    "\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063\uffe3" +
    "\064\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\072\uffe3\001" +
    "\002\000\136\002\uffda\004\uffda\005\uffda\006\uffda\007\uffda" +
    "\010\uffda\011\uffda\012\uffda\014\054\015\071\016\075\017" +
    "\066\020\063\021\061\022\052\023\076\024\073\025\056" +
    "\026\uffda\027\057\030\070\031\uffda\032\uffda\033\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\056\uffda\057\uffda\060\uffda\061" +
    "\uffda\062\uffda\063\uffda\064\uffda\065\uffda\066\uffda\067\uffda" +
    "\070\uffda\072\uffda\001\002\000\136\002\uffd6\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\012\uffd6\014\uffd6" +
    "\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022\uffd6\023" +
    "\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6\031\uffd6" +
    "\032\uffd6\033\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040" +
    "\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\056\uffd6" +
    "\057\uffd6\060\uffd6\061\uffd6\062\uffd6\063\uffd6\064\uffd6\065" +
    "\uffd6\066\uffd6\067\uffd6\070\uffd6\072\uffd6\001\002\000\136" +
    "\002\uffd7\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\011" +
    "\uffd7\012\uffd7\014\uffd7\015\uffd7\016\uffd7\017\uffd7\020\uffd7" +
    "\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027" +
    "\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\062\uffd7" +
    "\063\uffd7\064\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7\072" +
    "\uffd7\001\002\000\136\002\uffe0\004\uffe0\005\uffe0\006\uffe0" +
    "\007\uffe0\010\uffe0\011\uffe0\012\uffe0\014\054\015\071\016" +
    "\075\017\066\020\063\021\061\022\052\023\076\024\073" +
    "\025\056\026\uffe0\027\057\030\070\031\uffe0\032\uffe0\033" +
    "\uffe0\034\065\035\072\036\067\037\062\040\064\041\060" +
    "\042\uffe0\043\uffe0\044\uffe0\045\uffe0\056\uffe0\057\uffe0\060" +
    "\uffe0\061\uffe0\062\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0" +
    "\067\uffe0\070\uffe0\072\uffe0\001\002\000\136\002\uffe8\004" +
    "\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\012\uffe8" +
    "\014\uffe8\015\uffe8\016\075\017\066\020\063\021\061\022" +
    "\052\023\076\024\073\025\056\026\uffe8\027\057\030\070" +
    "\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\037" +
    "\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8" +
    "\056\uffe8\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\064" +
    "\uffe8\065\uffe8\066\uffe8\067\uffe8\070\uffe8\072\uffe8\001\002" +
    "\000\136\002\uffe1\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\014\054\015\071\016\075\017\066" +
    "\020\063\021\061\022\052\023\076\024\073\025\056\026" +
    "\uffe1\027\057\030\070\031\uffe1\032\055\033\uffe1\034\065" +
    "\035\072\036\067\037\062\040\064\041\060\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\056\uffe1\057\uffe1\060\uffe1\061\uffe1" +
    "\062\uffe1\063\uffe1\064\uffe1\065\uffe1\066\uffe1\067\uffe1\070" +
    "\uffe1\072\uffe1\001\002\000\136\002\uffe2\004\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022\uffe2\023\076" +
    "\024\073\025\056\026\uffe2\027\057\030\070\031\uffe2\032" +
    "\uffe2\033\uffe2\034\uffe2\035\uffe2\036\uffe2\037\uffe2\040\uffe2" +
    "\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\056\uffe2\057" +
    "\uffe2\060\uffe2\061\uffe2\062\uffe2\063\uffe2\064\uffe2\065\uffe2" +
    "\066\uffe2\067\uffe2\070\uffe2\072\uffe2\001\002\000\040\004" +
    "\050\005\041\006\007\007\027\010\026\011\017\012\035" +
    "\015\037\026\006\033\015\044\046\056\043\060\135\065" +
    "\033\067\013\001\002\000\004\004\125\001\002\000\004" +
    "\056\126\001\002\000\040\004\050\005\041\006\007\007" +
    "\027\010\026\011\017\012\035\015\037\026\006\033\015" +
    "\044\046\056\043\057\uffa1\065\033\067\013\001\002\000" +
    "\056\014\054\015\071\016\075\017\066\020\063\021\061" +
    "\022\052\023\076\024\073\025\056\027\057\030\070\031" +
    "\053\032\055\034\065\035\072\036\067\037\062\040\064" +
    "\041\060\057\uff9f\062\133\001\002\000\004\057\uffa0\001" +
    "\002\000\004\057\132\001\002\000\136\002\uffc4\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\014" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4" +
    "\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\056" +
    "\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\063\uffc4\064\uffc4" +
    "\065\uffc4\066\uffc4\067\uffc4\070\uffc4\072\uffc4\001\002\000" +
    "\036\004\050\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\044\046\056\043\065" +
    "\033\067\013\001\002\000\004\057\uff9e\001\002\000\042" +
    "\004\050\005\041\006\007\007\027\010\026\011\017\012" +
    "\035\015\037\026\006\033\015\044\046\056\043\060\153" +
    "\065\033\067\013\070\152\001\002\000\056\014\054\015" +
    "\071\016\075\017\066\020\063\021\061\022\052\023\076" +
    "\024\073\025\056\027\057\030\070\031\053\032\055\034" +
    "\065\035\072\036\067\037\062\040\064\041\060\060\140" +
    "\070\137\001\002\000\136\002\uffcd\004\uffcd\005\uffcd\006" +
    "\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd\014\uffcd\015\uffcd" +
    "\016\uffcd\017\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\056\uffcd\057\uffcd" +
    "\060\uffcd\061\uffcd\062\uffcd\063\uffcd\064\uffcd\065\uffcd\066" +
    "\uffcd\067\uffcd\070\uffcd\072\uffcd\001\002\000\042\004\050" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\044\046\056\043\060\142\065\033" +
    "\067\013\070\141\001\002\000\136\002\uffcc\004\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\014\uffcc" +
    "\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc\022\uffcc\023" +
    "\uffcc\024\uffcc\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc" +
    "\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\056\uffcc" +
    "\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\066\uffcc\067\uffcc\070\uffcc\072\uffcc\001\002\000\036" +
    "\004\050\005\041\006\007\007\027\010\026\011\017\012" +
    "\035\015\037\026\006\033\015\044\046\056\043\065\033" +
    "\067\013\001\002\000\056\014\054\015\071\016\075\017" +
    "\066\020\063\021\061\022\052\023\076\024\073\025\056" +
    "\027\057\030\070\031\053\032\055\034\065\035\072\036" +
    "\067\037\062\040\064\041\060\060\145\070\144\001\002" +
    "\000\136\002\uffca\004\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\026" +
    "\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\056\uffca\057\uffca\060\uffca\061\uffca" +
    "\062\uffca\063\uffca\064\uffca\065\uffca\066\uffca\067\uffca\070" +
    "\uffca\072\uffca\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\054" +
    "\014\054\015\071\016\075\017\066\020\063\021\061\022" +
    "\052\023\076\024\073\025\056\027\057\030\070\031\053" +
    "\032\055\034\065\035\072\036\067\037\062\040\064\041" +
    "\060\070\147\001\002\000\136\002\uffc5\004\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\023\uffc5" +
    "\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\056\uffc5\057" +
    "\uffc5\060\uffc5\061\uffc5\062\uffc5\063\uffc5\064\uffc5\065\uffc5" +
    "\066\uffc5\067\uffc5\070\uffc5\072\uffc5\001\002\000\054\014" +
    "\054\015\071\016\075\017\066\020\063\021\061\022\052" +
    "\023\076\024\073\025\056\027\057\030\070\031\053\032" +
    "\055\034\065\035\072\036\067\037\062\040\064\041\060" +
    "\070\151\001\002\000\136\002\uffc6\004\uffc6\005\uffc6\006" +
    "\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\014\uffc6\015\uffc6" +
    "\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\045\uffc6\056\uffc6\057\uffc6" +
    "\060\uffc6\061\uffc6\062\uffc6\063\uffc6\064\uffc6\065\uffc6\066" +
    "\uffc6\067\uffc6\070\uffc6\072\uffc6\001\002\000\136\002\uffc9" +
    "\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\056\uffc9\057\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9" +
    "\064\uffc9\065\uffc9\066\uffc9\067\uffc9\070\uffc9\072\uffc9\001" +
    "\002\000\036\004\050\005\041\006\007\007\027\010\026" +
    "\011\017\012\035\015\037\026\006\033\015\044\046\056" +
    "\043\065\033\067\013\001\002\000\056\014\054\015\071" +
    "\016\075\017\066\020\063\021\061\022\052\023\076\024" +
    "\073\025\056\027\057\030\070\031\053\032\055\034\065" +
    "\035\072\036\067\037\062\040\064\041\060\060\156\070" +
    "\155\001\002\000\136\002\uffcb\004\uffcb\005\uffcb\006\uffcb" +
    "\007\uffcb\010\uffcb\011\uffcb\012\uffcb\014\uffcb\015\uffcb\016" +
    "\uffcb\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb\032\uffcb\033" +
    "\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb" +
    "\042\uffcb\043\uffcb\044\uffcb\045\uffcb\056\uffcb\057\uffcb\060" +
    "\uffcb\061\uffcb\062\uffcb\063\uffcb\064\uffcb\065\uffcb\066\uffcb" +
    "\067\uffcb\070\uffcb\072\uffcb\001\002\000\036\004\050\005" +
    "\041\006\007\007\027\010\026\011\017\012\035\015\037" +
    "\026\006\033\015\044\046\056\043\065\033\067\013\001" +
    "\002\000\054\014\054\015\071\016\075\017\066\020\063" +
    "\021\061\022\052\023\076\024\073\025\056\027\057\030" +
    "\070\031\053\032\055\034\065\035\072\036\067\037\062" +
    "\040\064\041\060\070\160\001\002\000\136\002\uffc7\004" +
    "\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7" +
    "\014\uffc7\015\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022" +
    "\uffc7\023\uffc7\024\uffc7\025\uffc7\026\uffc7\027\uffc7\030\uffc7" +
    "\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036\uffc7\037" +
    "\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044\uffc7\045\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\063\uffc7\064" +
    "\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7\072\uffc7\001\002" +
    "\000\054\014\054\015\071\016\075\017\066\020\063\021" +
    "\061\022\052\023\076\024\073\025\056\027\057\030\070" +
    "\031\053\032\055\034\065\035\072\036\067\037\062\040" +
    "\064\041\060\070\162\001\002\000\136\002\uffc8\004\uffc8" +
    "\005\uffc8\006\uffc8\007\uffc8\010\uffc8\011\uffc8\012\uffc8\014" +
    "\uffc8\015\uffc8\016\uffc8\017\uffc8\020\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\064\uffc8" +
    "\065\uffc8\066\uffc8\067\uffc8\070\uffc8\072\uffc8\001\002\000" +
    "\050\004\023\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\042\040\043\025\044" +
    "\046\056\043\063\032\064\011\065\033\067\013\072\016" +
    "\001\002\000\004\045\uffae\001\002\000\004\002\uffff\001" +
    "\002\000\052\002\ufff9\004\023\005\041\006\007\007\027" +
    "\010\026\011\017\012\035\015\037\026\006\033\015\042" +
    "\040\043\025\044\046\056\043\063\032\064\011\065\033" +
    "\067\013\072\016\001\002\000\004\002\ufffa\001\002\000" +
    "\006\045\uffac\061\163\001\002\000\004\045\uffad\001\002" +
    "\000\004\055\173\001\002\000\036\004\050\005\041\006" +
    "\007\007\027\010\026\011\017\012\035\015\037\026\006" +
    "\033\015\044\046\056\043\065\033\067\013\001\002\000" +
    "\054\014\054\015\071\016\075\017\066\020\063\021\061" +
    "\022\052\023\076\024\073\025\056\027\057\030\070\031" +
    "\053\032\055\034\065\035\072\036\067\037\062\040\064" +
    "\041\060\060\175\001\002\000\052\004\023\005\041\006" +
    "\007\007\027\010\026\011\017\012\035\015\037\026\006" +
    "\033\015\042\040\043\025\044\046\045\200\056\043\063" +
    "\032\064\011\065\033\067\013\072\016\001\002\000\066" +
    "\002\uffb0\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010\uffb0\011" +
    "\uffb0\012\uffb0\015\uffb0\026\uffb0\033\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\045\uffb0\047\uffb0\050\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\056\uffb0\063\uffb0\064\uffb0\065\uffb0\067\uffb0\072\uffb0" +
    "\001\002\000\004\045\207\001\002\000\004\046\202\001" +
    "\002\000\006\045\uffac\061\163\001\002\000\060\004\023" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\042\040\043\025\044\046\050\020" +
    "\052\031\053\014\054\044\056\043\063\032\064\011\065" +
    "\033\067\013\072\016\001\002\000\062\004\uffa6\005\uffa6" +
    "\006\uffa6\007\uffa6\010\uffa6\011\uffa6\012\uffa6\015\uffa6\026" +
    "\uffa6\033\uffa6\042\uffa6\043\uffa6\044\uffa6\047\uffa6\050\uffa6" +
    "\052\uffa6\053\uffa6\054\uffa6\056\uffa6\063\uffa6\064\uffa6\065" +
    "\uffa6\067\uffa6\072\uffa6\001\002\000\062\004\023\005\041" +
    "\006\007\007\027\010\026\011\017\012\035\015\037\026" +
    "\006\033\015\042\040\043\025\044\046\047\206\050\020" +
    "\052\031\053\014\054\044\056\043\063\032\064\011\065" +
    "\033\067\013\072\016\001\002\000\062\004\uffa7\005\uffa7" +
    "\006\uffa7\007\uffa7\010\uffa7\011\uffa7\012\uffa7\015\uffa7\026" +
    "\uffa7\033\uffa7\042\uffa7\043\uffa7\044\uffa7\047\uffa7\050\uffa7" +
    "\052\uffa7\053\uffa7\054\uffa7\056\uffa7\063\uffa7\064\uffa7\065" +
    "\uffa7\067\uffa7\072\uffa7\001\002\000\070\002\uffa8\004\uffa8" +
    "\005\uffa8\006\uffa8\007\uffa8\010\uffa8\011\uffa8\012\uffa8\015" +
    "\uffa8\026\uffa8\033\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\056" +
    "\uffa8\063\uffa8\064\uffa8\065\uffa8\067\uffa8\072\uffa8\001\002" +
    "\000\070\002\uffa9\004\uffa9\005\uffa9\006\uffa9\007\uffa9\010" +
    "\uffa9\011\uffa9\012\uffa9\015\uffa9\026\uffa9\033\uffa9\042\uffa9" +
    "\043\uffa9\044\uffa9\045\uffa9\047\uffa9\050\uffa9\051\uffa9\052" +
    "\uffa9\053\uffa9\054\uffa9\056\uffa9\063\uffa9\064\uffa9\065\uffa9" +
    "\067\uffa9\072\uffa9\001\002\000\056\014\054\015\071\016" +
    "\075\017\066\020\063\021\061\022\052\023\076\024\073" +
    "\025\056\027\057\030\070\031\053\032\055\034\065\035" +
    "\072\036\067\037\062\040\064\041\060\057\213\062\212" +
    "\001\002\000\136\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007" +
    "\uffbb\010\uffbb\011\uffbb\012\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb" +
    "\034\uffbb\035\uffbb\036\uffbb\037\uffbb\040\uffbb\041\uffbb\042" +
    "\uffbb\043\uffbb\044\uffbb\045\uffbb\056\uffbb\057\uffbb\060\uffbb" +
    "\061\uffbb\062\uffbb\063\uffbb\064\uffbb\065\uffbb\066\uffbb\067" +
    "\uffbb\070\uffbb\072\uffbb\001\002\000\040\004\050\005\041" +
    "\006\007\007\027\010\026\011\017\012\035\015\037\026" +
    "\006\033\015\044\046\056\043\057\uffb8\065\033\067\013" +
    "\001\002\000\136\002\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\010\uffe9\011\uffe9\012\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\035\uffe9\036\uffe9\037\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\056\uffe9\057\uffe9\060\uffe9" +
    "\061\uffe9\062\uffe9\063\uffe9\064\uffe9\065\uffe9\066\uffe9\067" +
    "\uffe9\070\uffe9\072\uffe9\001\002\000\004\057\220\001\002" +
    "\000\056\014\054\015\071\016\075\017\066\020\063\021" +
    "\061\022\052\023\076\024\073\025\056\027\057\030\070" +
    "\031\053\032\055\034\065\035\072\036\067\037\062\040" +
    "\064\041\060\057\uffb9\062\216\001\002\000\040\004\050" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\044\046\056\043\057\uffb8\065\033" +
    "\067\013\001\002\000\004\057\uffba\001\002\000\136\002" +
    "\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\011\uffbc" +
    "\012\uffbc\014\uffbc\015\uffbc\016\uffbc\017\uffbc\020\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\036" +
    "\uffbc\037\uffbc\040\uffbc\041\uffbc\042\uffbc\043\uffbc\044\uffbc" +
    "\045\uffbc\056\uffbc\057\uffbc\060\uffbc\061\uffbc\062\uffbc\063" +
    "\uffbc\064\uffbc\065\uffbc\066\uffbc\067\uffbc\070\uffbc\072\uffbc" +
    "\001\002\000\124\002\ufff6\004\ufff6\005\ufff6\006\ufff6\007" +
    "\ufff6\010\ufff6\011\ufff6\012\ufff6\014\054\015\071\016\075" +
    "\017\066\020\063\021\061\022\052\023\076\024\073\025" +
    "\056\026\ufff6\027\057\030\070\031\053\032\055\033\ufff6" +
    "\034\065\035\072\036\067\037\062\040\064\041\060\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\056\ufff6\061\ufff6\063\ufff6" +
    "\064\ufff6\065\ufff6\067\ufff6\072\ufff6\001\002\000\136\002" +
    "\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010\uffd4\011\uffd4" +
    "\012\uffd4\014\uffd4\015\uffd4\016\075\017\066\020\063\021" +
    "\061\022\052\023\076\024\073\025\056\026\uffd4\027\057" +
    "\030\070\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\042\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\056\uffd4\057\uffd4\060\uffd4\061\uffd4\062\uffd4\063" +
    "\uffd4\064\uffd4\065\uffd4\066\uffd4\067\uffd4\070\uffd4\072\uffd4" +
    "\001\002\000\004\002\ufffd\001\002\000\054\014\054\015" +
    "\071\016\075\017\066\020\063\021\061\022\052\023\076" +
    "\024\073\025\056\027\057\030\070\031\053\032\055\034" +
    "\065\035\072\036\067\037\062\040\064\041\060\060\232" +
    "\001\002\000\040\004\050\005\041\006\007\007\027\010" +
    "\026\011\017\012\035\015\037\026\006\033\015\044\046" +
    "\056\043\065\033\066\uffbd\067\013\001\002\000\004\066" +
    "\227\001\002\000\136\002\uffc3\004\uffc3\005\uffc3\006\uffc3" +
    "\007\uffc3\010\uffc3\011\uffc3\012\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3" +
    "\025\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033" +
    "\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3" +
    "\042\uffc3\043\uffc3\044\uffc3\045\uffc3\056\uffc3\057\uffc3\060" +
    "\uffc3\061\uffc3\062\uffc3\063\uffc3\064\uffc3\065\uffc3\066\uffc3" +
    "\067\uffc3\070\uffc3\072\uffc3\001\002\000\004\066\231\001" +
    "\002\000\136\002\uffc2\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\011\uffc2\012\uffc2\014\uffc2\015\uffc2\016\uffc2\017" +
    "\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2" +
    "\043\uffc2\044\uffc2\045\uffc2\056\uffc2\057\uffc2\060\uffc2\061" +
    "\uffc2\062\uffc2\063\uffc2\064\uffc2\065\uffc2\066\uffc2\067\uffc2" +
    "\070\uffc2\072\uffc2\001\002\000\036\004\050\005\041\006" +
    "\007\007\027\010\026\011\017\012\035\015\037\026\006" +
    "\033\015\044\046\056\043\065\033\067\013\001\002\000" +
    "\060\014\054\015\071\016\075\017\066\020\063\021\061" +
    "\022\052\023\076\024\073\025\056\027\057\030\070\031" +
    "\053\032\055\034\065\035\072\036\067\037\062\040\064" +
    "\041\060\045\235\062\234\066\uffbf\001\002\000\042\004" +
    "\050\005\041\006\007\007\027\010\026\011\017\012\035" +
    "\015\037\026\006\033\015\044\046\045\236\056\043\065" +
    "\033\066\uffbd\067\013\001\002\000\004\066\uffbe\001\002" +
    "\000\040\004\050\005\041\006\007\007\027\010\026\011" +
    "\017\012\035\015\037\026\006\033\015\044\046\056\043" +
    "\065\033\066\uffbd\067\013\001\002\000\004\066\uffc0\001" +
    "\002\000\004\066\uffc1\001\002\000\004\056\242\001\002" +
    "\000\006\004\246\057\uffa2\001\002\000\004\060\244\001" +
    "\002\000\052\004\023\005\041\006\007\007\027\010\026" +
    "\011\017\012\035\015\037\026\006\033\015\042\040\043" +
    "\025\044\046\045\200\056\043\063\032\064\011\065\033" +
    "\067\013\072\016\001\002\000\066\002\uffaf\004\uffaf\005" +
    "\uffaf\006\uffaf\007\uffaf\010\uffaf\011\uffaf\012\uffaf\015\uffaf" +
    "\026\uffaf\033\uffaf\042\uffaf\043\uffaf\044\uffaf\045\uffaf\047" +
    "\uffaf\050\uffaf\052\uffaf\053\uffaf\054\uffaf\056\uffaf\063\uffaf" +
    "\064\uffaf\065\uffaf\067\uffaf\072\uffaf\001\002\000\006\057" +
    "\uffa3\062\251\001\002\000\004\057\250\001\002\000\004" +
    "\060\uffa5\001\002\000\006\004\246\057\uffa2\001\002\000" +
    "\004\057\uffa4\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\054" +
    "\014\054\015\071\016\075\017\066\020\063\021\061\022" +
    "\052\023\076\024\073\025\056\027\057\030\070\031\053" +
    "\032\055\034\065\035\072\036\067\037\062\040\064\041" +
    "\060\057\255\001\002\000\056\002\ufff5\004\ufff5\005\ufff5" +
    "\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\015\ufff5\026" +
    "\ufff5\033\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\056\ufff5" +
    "\061\ufff5\063\ufff5\064\ufff5\065\ufff5\067\ufff5\072\ufff5\001" +
    "\002\000\066\002\uffab\004\uffab\005\uffab\006\uffab\007\uffab" +
    "\010\uffab\011\uffab\012\uffab\015\uffab\026\uffab\033\uffab\042" +
    "\uffab\043\uffab\044\uffab\045\uffab\047\uffab\050\uffab\052\uffab" +
    "\053\uffab\054\uffab\056\uffab\063\uffab\064\uffab\065\uffab\067" +
    "\uffab\072\uffab\001\002\000\040\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\060\135\065\033\067\013\001\002" +
    "\000\036\004\050\005\041\006\007\007\027\010\026\011" +
    "\017\012\035\015\037\026\006\033\015\044\046\056\043" +
    "\065\033\067\013\001\002\000\124\002\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\014\054" +
    "\015\071\016\075\017\066\020\063\021\061\022\052\023" +
    "\076\024\073\025\056\026\ufff7\027\057\030\070\031\053" +
    "\032\055\033\ufff7\034\065\035\072\036\067\037\062\040" +
    "\064\041\060\042\ufff7\043\ufff7\044\ufff7\045\ufff7\056\ufff7" +
    "\061\ufff7\063\ufff7\064\ufff7\065\ufff7\067\ufff7\072\ufff7\001" +
    "\002\000\056\014\054\015\071\016\075\017\066\020\063" +
    "\021\061\022\052\023\076\024\073\025\056\027\057\030" +
    "\070\031\053\032\055\034\065\035\072\036\067\037\062" +
    "\040\064\041\060\060\140\070\263\001\002\000\126\002" +
    "\uffcd\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd" +
    "\012\uffcd\013\264\014\uffcd\015\uffcd\016\uffcd\017\uffcd\020" +
    "\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd" +
    "\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\045\uffcd\056\uffcd\061\uffcd\063\uffcd\064\uffcd\065" +
    "\uffcd\067\uffcd\072\uffcd\001\002\000\036\004\050\005\041" +
    "\006\007\007\027\010\026\011\017\012\035\015\037\026" +
    "\006\033\015\044\046\056\043\065\033\067\013\001\002" +
    "\000\124\002\ufff2\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\011\ufff2\012\ufff2\014\054\015\071\016\075\017\066" +
    "\020\063\021\061\022\052\023\076\024\073\025\056\026" +
    "\ufff2\027\057\030\070\031\053\032\055\033\ufff2\034\065" +
    "\035\072\036\067\037\062\040\064\041\060\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\056\ufff2\061\ufff2\063\ufff2\064\ufff2" +
    "\065\ufff2\067\ufff2\072\ufff2\001\002\000\004\002\000\001" +
    "\002\000\054\014\054\015\071\016\075\017\066\020\063" +
    "\021\061\022\052\023\076\024\073\025\056\027\057\030" +
    "\070\031\053\032\055\034\065\035\072\036\067\037\062" +
    "\040\064\041\060\060\270\001\002\000\052\004\023\005" +
    "\041\006\007\007\027\010\026\011\017\012\035\015\037" +
    "\026\006\033\015\042\040\043\025\044\046\045\200\056" +
    "\043\063\032\064\011\065\033\067\013\072\016\001\002" +
    "\000\070\002\uffb2\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010" +
    "\uffb2\011\uffb2\012\uffb2\015\uffb2\026\uffb2\033\uffb2\042\uffb2" +
    "\043\uffb2\044\uffb2\045\uffb2\047\uffb2\050\uffb2\051\272\052" +
    "\uffb2\053\uffb2\054\uffb2\056\uffb2\063\uffb2\064\uffb2\065\uffb2" +
    "\067\uffb2\072\uffb2\001\002\000\004\060\273\001\002\000" +
    "\052\004\023\005\041\006\007\007\027\010\026\011\017" +
    "\012\035\015\037\026\006\033\015\042\040\043\025\044" +
    "\046\045\200\056\043\063\032\064\011\065\033\067\013" +
    "\072\016\001\002\000\066\002\uffb3\004\uffb3\005\uffb3\006" +
    "\uffb3\007\uffb3\010\uffb3\011\uffb3\012\uffb3\015\uffb3\026\uffb3" +
    "\033\uffb3\042\uffb3\043\uffb3\044\uffb3\045\uffb3\047\uffb3\050" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\056\uffb3\063\uffb3\064\uffb3" +
    "\065\uffb3\067\uffb3\072\uffb3\001\002\000\060\002\ufff1\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1" +
    "\015\ufff1\026\ufff1\033\ufff1\042\ufff1\043\ufff1\044\ufff1\045" +
    "\ufff1\056\ufff1\061\ufff1\062\277\063\ufff1\064\ufff1\065\ufff1" +
    "\067\ufff1\072\ufff1\001\002\000\130\002\uffb4\004\uffb4\005" +
    "\uffb4\006\uffb4\007\uffb4\010\uffb4\011\uffb4\012\uffb4\014\054" +
    "\015\071\016\075\017\066\020\063\021\061\022\052\023" +
    "\076\024\073\025\056\026\uffb4\027\057\030\070\031\053" +
    "\032\055\033\uffb4\034\065\035\072\036\067\037\062\040" +
    "\064\041\060\042\uffb4\043\uffb4\044\uffb4\045\uffb4\056\uffb4" +
    "\061\uffb4\062\uffb4\063\uffb4\064\uffb4\065\uffb4\067\uffb4\070" +
    "\uffb4\072\uffb4\001\002\000\036\004\050\005\041\006\007" +
    "\007\027\010\026\011\017\012\035\015\037\026\006\033" +
    "\015\044\046\056\043\065\033\067\013\001\002\000\130" +
    "\002\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5\011" +
    "\uffb5\012\uffb5\014\054\015\071\016\075\017\066\020\063" +
    "\021\061\022\052\023\076\024\073\025\056\026\uffb5\027" +
    "\057\030\070\031\053\032\055\033\uffb5\034\065\035\072" +
    "\036\067\037\062\040\064\041\060\042\uffb5\043\uffb5\044" +
    "\uffb5\045\uffb5\056\uffb5\061\uffb5\062\uffb5\063\uffb5\064\uffb5" +
    "\065\uffb5\067\uffb5\070\uffb5\072\uffb5\001\002\000\136\002" +
    "\uffd2\004\uffd2\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2" +
    "\012\uffd2\014\054\015\071\016\075\017\066\020\063\021" +
    "\061\022\052\023\076\024\073\025\056\026\uffd2\027\057" +
    "\030\070\031\053\032\055\033\uffd2\034\065\035\072\036" +
    "\067\037\062\040\064\041\060\042\uffd2\043\uffd2\044\uffd2" +
    "\045\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063" +
    "\uffd2\064\uffd2\065\uffd2\066\uffd2\067\uffd2\070\uffd2\072\uffd2" +
    "\001\002\000\054\014\054\015\071\016\075\017\066\020" +
    "\063\021\061\022\052\023\076\024\073\025\056\027\057" +
    "\030\070\031\053\032\055\034\065\035\072\036\067\037" +
    "\062\040\064\041\060\060\303\001\002\000\052\004\023" +
    "\005\041\006\007\007\027\010\026\011\017\012\035\015" +
    "\037\026\006\033\015\042\040\043\025\044\046\045\200" +
    "\056\043\063\032\064\011\065\033\067\013\072\016\001" +
    "\002\000\066\002\uffb1\004\uffb1\005\uffb1\006\uffb1\007\uffb1" +
    "\010\uffb1\011\uffb1\012\uffb1\015\uffb1\026\uffb1\033\uffb1\042" +
    "\uffb1\043\uffb1\044\uffb1\045\uffb1\047\uffb1\050\uffb1\052\uffb1" +
    "\053\uffb1\054\uffb1\056\uffb1\063\uffb1\064\uffb1\065\uffb1\067" +
    "\uffb1\072\uffb1\001\002\000\006\062\277\070\307\001\002" +
    "\000\136\002\uffb6\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010" +
    "\uffb6\011\uffb6\012\uffb6\014\uffb6\015\uffb6\016\uffb6\017\uffb6" +
    "\020\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043" +
    "\uffb6\044\uffb6\045\uffb6\056\uffb6\057\uffb6\060\uffb6\061\uffb6" +
    "\062\uffb6\063\uffb6\064\uffb6\065\uffb6\066\uffb6\067\uffb6\070" +
    "\uffb6\072\uffb6\001\002\000\136\002\uffb7\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\014\uffb7\015" +
    "\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7" +
    "\024\uffb7\025\uffb7\026\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037\uffb7\040\uffb7" +
    "\041\uffb7\042\uffb7\043\uffb7\044\uffb7\045\uffb7\056\uffb7\057" +
    "\uffb7\060\uffb7\061\uffb7\062\uffb7\063\uffb7\064\uffb7\065\uffb7" +
    "\066\uffb7\067\uffb7\070\uffb7\072\uffb7\001\002\000\004\002" +
    "\ufffc\001\002\000\136\002\uffd3\004\uffd3\005\uffd3\006\uffd3" +
    "\007\uffd3\010\uffd3\011\uffd3\012\uffd3\014\054\015\071\016" +
    "\075\017\066\020\063\021\061\022\052\023\076\024\073" +
    "\025\056\026\uffd3\027\057\030\070\031\053\032\055\033" +
    "\uffd3\034\065\035\072\036\067\037\062\040\064\041\060" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\064\uffd3\065\uffd3\066\uffd3" +
    "\067\uffd3\070\uffd3\072\uffd3\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\307\000\030\002\021\003\007\004\041\006\044\007" +
    "\020\010\023\012\011\014\027\015\004\016\003\017\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\310\015\004\016\003\017\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\307\006" +
    "\200\007\020\010\023\012\011\014\027\015\004\016\003" +
    "\017\033\001\001\000\014\014\275\015\004\016\003\017" +
    "\033\022\304\001\001\000\012\014\301\015\004\016\003" +
    "\017\033\001\001\000\012\014\300\015\004\016\003\017" +
    "\033\001\001\000\014\014\275\015\004\016\003\017\033" +
    "\022\274\001\001\000\002\001\001\000\012\014\266\015" +
    "\004\016\003\017\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\014\223\015" +
    "\004\016\003\017\033\020\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\222\006\200\007\020\010" +
    "\023\012\011\014\027\015\004\016\003\017\033\001\001" +
    "\000\012\014\221\015\004\016\003\017\033\001\001\000" +
    "\012\014\220\015\004\016\003\017\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\014\207\015\004\016" +
    "\003\017\033\001\001\000\002\001\001\000\020\005\164" +
    "\006\165\011\163\014\027\015\004\016\003\017\033\001" +
    "\001\000\002\001\001\000\012\014\050\015\004\016\003" +
    "\017\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\014\121\015\004\016\003\017\033\001\001\000\012" +
    "\014\120\015\004\016\003\017\033\001\001\000\012\014" +
    "\117\015\004\016\003\017\033\001\001\000\012\014\116" +
    "\015\004\016\003\017\033\001\001\000\012\014\115\015" +
    "\004\016\003\017\033\001\001\000\012\014\114\015\004" +
    "\016\003\017\033\001\001\000\012\014\113\015\004\016" +
    "\003\017\033\001\001\000\012\014\112\015\004\016\003" +
    "\017\033\001\001\000\012\014\111\015\004\016\003\017" +
    "\033\001\001\000\012\014\110\015\004\016\003\017\033" +
    "\001\001\000\012\014\107\015\004\016\003\017\033\001" +
    "\001\000\012\014\106\015\004\016\003\017\033\001\001" +
    "\000\012\014\105\015\004\016\003\017\033\001\001\000" +
    "\012\014\104\015\004\016\003\017\033\001\001\000\012" +
    "\014\103\015\004\016\003\017\033\001\001\000\012\014" +
    "\102\015\004\016\003\017\033\001\001\000\012\014\101" +
    "\015\004\016\003\017\033\001\001\000\012\014\100\015" +
    "\004\016\003\017\033\001\001\000\002\001\001\000\012" +
    "\014\077\015\004\016\003\017\033\001\001\000\012\014" +
    "\076\015\004\016\003\017\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\135\015\004\016\003\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\014\126\015\004\016\003" +
    "\017\033\026\130\027\127\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\014\126\015\004\016\003\017\033\027\133\001\001\000" +
    "\002\001\001\000\012\014\153\015\004\016\003\017\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\014" +
    "\142\015\004\016\003\017\033\001\001\000\002\001\001" +
    "\000\012\014\147\015\004\016\003\017\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\145\015\004" +
    "\016\003\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\160\015\004\016\003\017\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\014\156\015\004" +
    "\016\003\017\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\167" +
    "\014\027\015\004\016\003\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\005\166\006\165\014\027" +
    "\015\004\016\003\017\033\001\001\000\002\001\001\000" +
    "\004\011\170\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\173\015\004\016\003\017\033\001\001\000" +
    "\002\001\001\000\020\006\200\010\176\014\027\015\004" +
    "\016\003\017\033\023\175\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\163\001\001" +
    "\000\024\006\200\007\020\010\023\012\202\013\203\014" +
    "\027\015\004\016\003\017\033\001\001\000\002\001\001" +
    "\000\022\006\200\007\020\010\023\012\204\014\027\015" +
    "\004\016\003\017\033\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\214\015\004\016\003\017\033\021\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\014\214\015\004\016\003\017\033\021\216" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\014\223\015\004\016\003\017\033\020\227\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\014\232\015\004\016\003\017" +
    "\033\001\001\000\002\001\001\000\014\014\223\015\004" +
    "\016\003\017\033\020\236\001\001\000\002\001\001\000" +
    "\014\014\223\015\004\016\003\017\033\020\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\024\242\001" +
    "\001\000\004\025\246\001\001\000\002\001\001\000\020" +
    "\006\200\010\176\014\027\015\004\016\003\017\033\023" +
    "\244\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\251\001\001\000" +
    "\002\001\001\000\012\014\253\015\004\016\003\017\033" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\014\261\015\004\016\003\017\033\001\001" +
    "\000\012\014\260\015\004\016\003\017\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\014\264\015\004\016\003\017\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\200" +
    "\010\176\014\027\015\004\016\003\017\033\023\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\006\200" +
    "\010\176\014\027\015\004\016\003\017\033\023\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\014\277\015\004\016\003\017\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\006\200\010\176\014\027\015\004\016\003\017\033\023" +
    "\303\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol s){
		//int line = s.left + 1;
		//int column = s.right + 1;
		int line = s.left;
		int column = s.right;
		if(s.value==null) {
			throw new ParsingException(line, "Sintaxis incorrecta");
		} else {
			throw new ParsingException(line, column, "Sintaxis incorrecta: " + s.value);
		}
	}

	public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {



	private boolean returnFlag;
	private int returnLine;
	private int returnColumn;

	private boolean breakFlag;
	private int breakLine;
	private int breakColumn;
	
	private boolean continueFlag;
	private int continueLine;
	private int continueColumn;
	
	public void setReturnFlag(boolean value, int line, int column) {
		returnFlag = value;
		returnLine = line;
		returnColumn = column;
	}
	
	public void setBreakFlag(boolean value, int line, int column) {
		breakFlag = value;
		breakLine = line;
		breakColumn = column;
	}
	
	public void setContinueFlag(boolean value, int line, int column) {
		continueFlag = value;
		continueLine = line;
		continueColumn = column;
	}
	
	public void checkReturnErrors() {
		if (returnFlag) { 
			throw new ParsingException(returnLine, returnColumn, "Sintaxis incorrecta: return");
		}
	}

	public void checkBreakContinueErrors() {
		if (breakFlag) {
			throw new ParsingException(breakLine, breakColumn, "Sintaxis incorrecta: break");
		}
		if (continueFlag) {
			throw new ParsingException(continueLine, continueColumn, "Sintaxis incorrecta: continue");
		}
	}
	
 
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // argument_list ::= expression COMMA argument_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int elemsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elemsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object elems = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>)elems).add(0,e);
											RESULT = elems; 
										 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // argument_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expression> args = new ArrayList<Expression>();
									args.add(0,e);
									RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argument_list",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // arguments ::= argument_list 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = args; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // arguments ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arguments",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // function_parameters_list ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<IdentifierExpression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parameters_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // function_parameters_list ::= ID 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<IdentifierExpression> list = new ArrayList<>();
									   list.add(new IdentifierExpression(i,ileft));
									   RESULT = list;
									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parameters_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // function_parameters_list ::= ID COMMA function_parameters_list 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<IdentifierExpression>)list).add(new IdentifierExpression(i,ileft));
																		 RESULT = list;
																	  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parameters_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // function_parameters ::= LEFTPARENTHESE function_parameters_list RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("function_parameters",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // statement_list ::= statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Statement> list = new LinkedList<Statement>();
										list.addAll((List<Statement>)stmt);
										RESULT = list;
									  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // statement_list ::= statement_list statement 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		((List<Statement>)list).addAll((List<Statement>)stmt);
														RESULT = list;
													  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // block ::= NEWLINE START_BLOCK statement_list END_BLOCK 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (List<Statement>)list;	
		  	 										  		  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // block ::= stmt_list NEWLINE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = (List<Statement>)list;
 								 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // statement ::= compound_statement 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			List<Statement> list = new LinkedList<Statement>();
											list.add((Statement)stmt);
											RESULT = list;
										
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // statement ::= stmt_list NEWLINE 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = list;
									 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // simple_stmt_semicolon_list ::= 
            {
              Object RESULT =null;
		
							    	RESULT = new LinkedList<Statement>(); 
							   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // simple_stmt_semicolon_list ::= SEMICOLON simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
																									((List<Statement>)list).add((Statement)stmt); 
																									RESULT = list;
																							   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_stmt_semicolon_list",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // stmt_list ::= simple_statement simple_stmt_semicolon_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	((List<Statement>)list).add((Statement)stmt); 
																		RESULT = list;
																	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // compound_statement ::= DEF ID function_parameters COLON block 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  setReturnFlag(false, ileft, iright);
					   														 IdentifierExpression id = new IdentifierExpression(i, ileft);
					   			 											 RESULT = new FunctionStatement(id, (List<IdentifierExpression>) list, (BlockStatement) b);
					   													 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // compound_statement ::= FOR ID IN expression COLON block 
            {
              Object RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			setContinueFlag(false, expleft, expright);
															 			setBreakFlag(false, expleft, expright);  
					   													RESULT = new ForStatement(var, exp, (List<Statement>)b, bleft); 
					   												
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // compound_statement ::= WHILE expression COLON block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 setContinueFlag(false, eleft, eright);
															 setBreakFlag(false, eleft, eright); 
					   										 RESULT = new WhileStatement(e, (List<Statement>) b, eleft); 
					   									  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // compound_statement ::= IF expression COLON block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e, (List<Statement>) b, null, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // compound_statement ::= IF expression COLON block ELSE COLON block 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatement(e, (List<Statement>) i,(List<Statement>) b, eleft ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("compound_statement",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression_list_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expression> lista = new ArrayList<>();
										  lista.add(e);
										  RESULT = lista;
									   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression_list_list ::= expression_list_list COMMA expression 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>)list).add(e);
																		    RESULT = list;
																		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_list_list",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // list_expression ::= LEFTRECT RIGHTRECT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ArrayList<Expression> list = new ArrayList<>();
														RESULT = new ListExpression(list, lleft);
													 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // list_expression ::= LEFTRECT expression_list_list RIGHTRECT 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ListExpression((ArrayList<Expression>)list, lleft); 
																								  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("list_expression",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // expression_tuple_list ::= 
            {
              Object RESULT =null;
		 RESULT = new ArrayList<Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_tuple_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // expression_tuple_list ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Expression> tuple = new ArrayList<>();
										  tuple.add(0,e);
										  RESULT = tuple;
									   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_tuple_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // expression_tuple_list ::= expression COMMA expression_tuple_list 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((ArrayList<Expression>)list).add(0,e);
																		    RESULT = list;
																		
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_tuple_list",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // tuple_expression ::= LEFTPARENTHESE RIGHTPARENTHESE 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ArrayList<Expression> tuple = new ArrayList<>();
														RESULT = new TupleExpression(tuple, lleft);
													 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tuple_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // tuple_expression ::= LEFTPARENTHESE expression COMMA expression_tuple_list RIGHTPARENTHESE 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 ((ArrayList<Expression>)list).add(0,e); 
																									RESULT = new TupleExpression((ArrayList<Expression>)list, lleft); 
																								  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tuple_expression",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // expression_map_list ::= 
            {
              Object RESULT =null;
		 RESULT = new HashMap<Expression, Expression>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_map_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // expression_map_list ::= expression COLON expression NEWLINE 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Map<Expression, Expression> map = new HashMap<Expression, Expression>();
															map.put(key,val);
															RESULT = map;
														 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_map_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expression_map_list ::= expression COLON expression 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Map<Expression, Expression> map = new HashMap<Expression, Expression>();
															map.put(key,val);
															RESULT = map;
														 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_map_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expression_map_list ::= expression COLON expression COMMA expression_map_list 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((Map<Expression,Expression>)list).put((Expression)key,(Expression)val);
																							RESULT = list;
																						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_map_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expression_map_list ::= expression COLON expression COMMA NEWLINE expression_map_list 
            {
              Object RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression key = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression val = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ((Map<Expression,Expression>)list).put((Expression)key,(Expression)val);
																									  RESULT = list;
																									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression_map_list",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // map_expression ::= LEFTLLAVE NEWLINE expression_map_list RIGHTLLAVE 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DictionaryExpression((Map<Expression,Expression>)list, lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // map_expression ::= LEFTLLAVE expression_map_list RIGHTLLAVE 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DictionaryExpression((Map<Expression,Expression>)list, lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("map_expression",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expression ::= ID DOT ID LEFTPARENTHESE arguments RIGHTPARENTHESE 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int funcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String func = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object params = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 	IdentifierExpression id = new IdentifierExpression(i, ileft);
																					RESULT = new MethodCallExpression(id,func,(List<Expression>)params,ileft); 
																			   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expression ::= ID LEFTRECT expression COLON expression COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, s, e, f,true, ileft);
											   	   					  					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expression ::= ID LEFTRECT expression COLON COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, s, null, f,true, ileft);
											   	   					  					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expression ::= ID LEFTRECT COLON expression COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i,ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, null, s, f,true, ileft);
											   	   					  					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expression ::= ID LEFTRECT COLON COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression f = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 					RESULT = new StructuredTypePositionExpression(id, null, null, f,true, ileft);
											   	   					  					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expression ::= ID LEFTRECT COLON RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 				RESULT = new StructuredTypePositionExpression(id, null, null, null,true, ileft);
											   	   					  					 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expression ::= ID LEFTRECT expression COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							
											   							 RESULT = new StructuredTypePositionExpression(id, s, e, null,true, ileft);
											   	   					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expression ::= ID LEFTRECT COLON expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft);
															 		RESULT = new StructuredTypePositionExpression(id, null, s, null,true, ileft);
											   	   					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expression ::= ID LEFTRECT expression COLON RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression s = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   							 RESULT = new StructuredTypePositionExpression(id, s, null, null,true, ileft);
											   	   					  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expression ::= ID LEFTRECT expression RIGHTRECT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
			IdentifierExpression id = new IdentifierExpression(i, ileft); 
											   			RESULT = new StructuredTypePositionExpression(id, e, null, null,false, ileft);
											   	   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expression ::= list_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expression ::= map_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expression ::= tuple_expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expression ::= RAW_INPUT LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadExpression((Expression) e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationExpression("not", (Expression)e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expression ::= NOT_BIT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationExpression("~", (Expression)e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UnaryOperationExpression("-", (Expression)e, eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expression ::= expression RSHIFT_BIT expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, ">>", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expression ::= expression LSHIFT_BIT expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "<<", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expression ::= expression XOR_BIT expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "^", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expression ::= expression OR_BIT expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "|", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expression ::= expression AND_BIT expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "&", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expression ::= expression GREATEQUAL_THAN expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, ">=", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expression ::= expression GREAT_THAN expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, ">", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expression ::= expression LESSEQUAL_THAN expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "<=", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expression ::= expression LESS_THAN expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "<", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expression ::= expression NOT_EQUALS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "!=", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expression ::= expression EQUALS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "==", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "or", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "and", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= expression MOD expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "%", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= expression INT_DIV expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "//", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= expression EXP expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "**", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= expression MUL expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "*", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "/", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "-", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression l = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression r = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BinaryOperationExpression((Expression)l, "+", (Expression)r, lleft) ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= ID 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IdentifierExpression(i, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= FALSE 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanExpression(false, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= TRUE 
            {
              Expression RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new BooleanExpression(true, bleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= FLOAT 
            {
              Expression RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new FloatExpression(Float.valueOf(f), fleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= LONG 
            {
              Expression RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LongExpression(l, lleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= STRING 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StringExpression(s, sleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= INTEGER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntegerExpression(Integer.valueOf(i), ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expression",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simple_statement ::= RETURN expression_list_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			setReturnFlag(true, listleft, listright); 
					 									   	RESULT = new ReturnStatement((List<Expression>) list, 0);
					 									
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // simple_statement ::= ID LEFTRECT expression RIGHTRECT ASSIGN expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int kleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int kright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression k = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 IdentifierExpression id = new IdentifierExpression(i, ileft);
					 															   RESULT = new AssignStructuredTypeStatement(id, e, k, ileft);
					 															
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // simple_statement ::= CONTINUE 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 setContinueFlag(true, cleft, cright);
									  RESULT = new ContinueStatement(cleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // simple_statement ::= BREAK 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 setBreakFlag(true, bleft, bright);
									RESULT = new BreakStatement(bleft); 
								
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // simple_statement ::= TYPE LEFTPARENTHESE expression RIGHTPARENTHESE 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new TypeStatement((Expression) e, tleft);	
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // simple_statement ::= PRINT expression 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new PrintStatement((Expression) e, pleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // simple_statement ::= ID ASSIGN expression 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatement(i, (Expression)e, ileft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // simple_statement ::= expression 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // simple_statement_list ::= 
            {
              Object RESULT =null;
		 
						  	RESULT = new LinkedList<Statement>(); 
						  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // simple_statement_list ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	
																				((List<Statement>)list).add((Statement)stmt);
																				RESULT = list;
																			
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_statement_list",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement_newline_list ::= 
            {
              Object RESULT =null;
		 
								RESULT = new LinkedList<Statement>(); 
							
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_newline_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement_newline_list ::= statement statement_newline_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
																			((List<Statement>)list).addAll((List<Statement>)stmt);
																			RESULT = list;
																		 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_newline_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement_newline_list ::= NEWLINE statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
																	RESULT = list; 
																
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_newline_list",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // module ::= statement_newline_list 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
		   									RESULT = list; 
		   								 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // module ::= simple_statement simple_statement_list 
            {
              Object RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object stmt = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
			
						 										((List<Statement>)list).add((Statement)stmt);
																RESULT = list;
															
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("module",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= module 
            {
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 	checkBreakContinueErrors();
							checkReturnErrors();
							Collections.reverse((List<Statement>)list);
							RESULT = new Program((List<Statement>)list);
						
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

