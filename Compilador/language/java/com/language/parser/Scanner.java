/* The following code was generated by JFlex 1.4.1 on 7/12/15 8:46 PM */

package com.language.parser;

import java.util.*;
import java_cup.runtime.*;
import java.util.Stack;
import com.language.exceptions.*;
import com.language.model.expression.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7/12/15 8:46 PM from the specification file
 * <tt>C:/Users/Tincho/workspace/compiladores2015/Compilador/language/jflex/Scanner.jflex</tt>
 */
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int SIMPLE_QUOTE_TRIPLE_STRING = 7;
  public static final int YYINITIAL = 0;
  public static final int DOUBLE_QUOTE_TRIPLE_STRING = 6;
  public static final int DOUBLE_QUOTE_ONCE_STRING = 4;
  public static final int NORMAL_STATE = 3;
  public static final int INDENT_STATE = 1;
  public static final int SIMPLE_QUOTE_ONCE_STRING = 5;
  public static final int BLOCK_STATE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\15\1\2\1\0\1\3\1\1\22\0\1\12\1\37\1\70"+
    "\1\14\1\0\1\23\1\24\1\67\1\57\1\60\1\21\1\17\1\66"+
    "\1\20\1\6\1\22\3\4\1\71\6\4\1\51\1\65\1\27\1\16"+
    "\1\30\2\0\4\13\1\10\1\45\5\13\1\5\7\13\1\43\6\13"+
    "\1\63\1\72\1\64\1\25\1\13\1\0\1\31\1\54\1\56\1\33"+
    "\1\7\1\50\1\13\1\53\1\41\1\13\1\55\1\46\1\13\1\32"+
    "\1\34\1\40\1\13\1\35\1\47\1\36\1\44\1\13\1\52\1\13"+
    "\1\42\1\13\1\61\1\11\1\62\1\26\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\2\2\1\3\1\4\1\5\1\6\2\7"+
    "\2\10\1\11\1\12\1\13\1\1\1\13\1\14\1\11"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\5\13\1\1\4\13\1\30\3\13"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\2\45\2\1\1\46\1\47"+
    "\1\0\1\13\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\3\13\1\57\1\13\1\60\1\13\1\61\2\13"+
    "\2\62\1\0\3\13\2\0\1\63\1\64\1\65\1\66"+
    "\1\67\3\0\1\13\1\70\1\71\1\72\7\13\1\73"+
    "\1\74\1\75\1\47\1\76\1\77\1\13\1\100\4\13"+
    "\1\101\1\102\1\103\1\104\3\13\1\105";

  private static int [] zzUnpackAction() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u01d8\0\u0213\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8"+
    "\0\u0213\0\u024e\0\u01d8\0\u01d8\0\u0289\0\u02c4\0\u02ff\0\u033a"+
    "\0\u01d8\0\u0375\0\u03b0\0\u01d8\0\u01d8\0\u03eb\0\u0426\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea\0\u0725"+
    "\0\u0760\0\u079b\0\u07d6\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u0811\0\u084c\0\u01d8\0\u01d8\0\u0887"+
    "\0\u08c2\0\u08fd\0\u0938\0\u01d8\0\u0973\0\u09ae\0\u09e9\0\u01d8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u02c4\0\u0ad5\0\u01d8\0\u0b10\0\u02c4\0\u0b4b\0\u0b86"+
    "\0\u0bc1\0\u01d8\0\u0725\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u01d8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u02c4\0\u02c4\0\u02c4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u0efb\0\u0f36\0\u0f71\0\u01d8\0\u01d8\0\u01d8\0\u0d99\0\u02c4"+
    "\0\u02c4\0\u0fac\0\u02c4\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u02c4"+
    "\0\u02c4\0\u02c4\0\u02c4\0\u10d3\0\u110e\0\u1149\0\u02c4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\11\1\0\70\11\1\12\1\13\1\14\1\15\6\12"+
    "\1\16\2\12\1\17\55\12\1\20\1\21\1\14\1\15"+
    "\6\20\1\16\2\20\1\17\55\20\1\11\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\26\1\31\1\24"+
    "\1\26\1\32\1\24\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\26\1\52\1\53\1\54\1\55\1\26"+
    "\1\56\1\26\1\57\3\26\1\60\1\61\1\26\1\62"+
    "\1\26\1\63\1\64\1\65\1\66\1\67\1\70\1\71"+
    "\1\72\1\73\1\74\1\75\1\25\1\11\2\76\1\0"+
    "\65\76\1\77\1\76\1\100\2\76\1\0\64\76\1\77"+
    "\2\76\1\101\61\76\2\11\5\76\1\102\1\11\62\76"+
    "\2\11\4\76\1\103\1\76\1\11\1\76\75\0\1\14"+
    "\72\0\1\23\74\0\1\25\1\104\1\105\2\106\60\0"+
    "\1\25\5\0\2\26\1\0\2\26\2\0\1\26\15\0"+
    "\6\26\1\0\11\26\1\0\5\26\12\0\1\26\5\0"+
    "\1\105\64\0\1\105\5\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\6\26\1\0\6\26\1\107\2\26\1\0"+
    "\5\26\12\0\1\26\1\0\2\32\1\0\70\32\16\0"+
    "\1\110\75\0\1\111\73\0\1\112\66\0\1\113\10\0"+
    "\1\114\61\0\1\115\11\0\1\116\46\0\2\26\1\0"+
    "\2\26\2\0\1\26\15\0\1\26\1\117\4\26\1\0"+
    "\11\26\1\0\5\26\12\0\1\26\5\0\2\26\1\0"+
    "\2\26\2\0\1\26\15\0\3\26\1\120\2\26\1\0"+
    "\11\26\1\0\5\26\12\0\1\26\5\0\2\26\1\0"+
    "\1\121\1\26\2\0\1\26\15\0\6\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\4\26\1\122\1\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\6\26\1\0\2\26\1\123\6\26"+
    "\1\0\5\26\12\0\1\26\17\0\1\124\60\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\4\26\1\125\1\26"+
    "\1\0\11\26\1\0\5\26\12\0\1\26\5\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\6\26\1\0\10\26"+
    "\1\126\1\0\5\26\12\0\1\26\5\0\2\26\1\0"+
    "\2\26\2\0\1\26\15\0\4\26\1\127\1\26\1\0"+
    "\11\26\1\0\5\26\12\0\1\26\5\0\2\26\1\0"+
    "\2\26\2\0\1\26\15\0\1\130\5\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\2\0\1\131\1\132\1\133"+
    "\6\0\1\133\2\0\1\133\61\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\6\26\1\0\11\26\1\0\1\26"+
    "\1\134\3\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\4\26\1\135\1\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\3\26\1\136\2\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\70\0\1\137\73\0\1\140"+
    "\34\0\1\141\2\0\1\142\1\143\31\0\1\144\34\0"+
    "\1\141\2\0\1\142\1\143\30\0\1\145\73\0\1\146"+
    "\71\0\1\147\7\0\1\105\2\0\2\106\60\0\1\105"+
    "\12\0\2\150\4\0\2\150\56\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\6\26\1\0\7\26\1\151\1\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\2\26\1\152\3\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\5\26\1\153\1\0\11\26\1\0"+
    "\5\26\12\0\1\26\5\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\6\26\1\0\10\26\1\154\1\0\5\26"+
    "\12\0\1\26\5\0\2\26\1\0\2\26\2\0\1\26"+
    "\15\0\6\26\1\0\1\155\10\26\1\0\5\26\12\0"+
    "\1\26\5\0\2\26\1\0\2\26\2\0\1\26\15\0"+
    "\6\26\1\0\1\26\1\156\7\26\1\0\5\26\12\0"+
    "\1\26\5\0\2\26\1\0\2\26\2\0\1\26\15\0"+
    "\6\26\1\0\4\26\1\157\4\26\1\0\5\26\12\0"+
    "\1\26\5\0\2\26\1\0\2\26\2\0\1\26\15\0"+
    "\6\26\1\0\6\26\1\160\2\26\1\0\5\26\12\0"+
    "\1\26\3\0\1\132\74\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\6\26\1\0\1\26\1\161\7\26\1\0"+
    "\5\26\12\0\1\26\5\0\2\26\1\0\1\162\1\26"+
    "\2\0\1\26\15\0\6\26\1\0\11\26\1\0\5\26"+
    "\12\0\1\26\5\0\2\26\1\0\2\26\2\0\1\26"+
    "\15\0\1\26\1\163\4\26\1\0\11\26\1\0\5\26"+
    "\12\0\1\26\70\0\1\164\73\0\1\165\72\0\1\166"+
    "\71\0\1\166\7\0\1\167\64\0\1\167\5\0\2\26"+
    "\1\0\1\170\1\26\2\0\1\26\15\0\6\26\1\0"+
    "\11\26\1\0\5\26\12\0\1\26\5\0\2\26\1\0"+
    "\1\171\1\26\2\0\1\26\15\0\6\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\2\26"+
    "\2\0\1\26\15\0\1\26\1\172\4\26\1\0\11\26"+
    "\1\0\5\26\12\0\1\26\5\0\2\26\1\0\1\173"+
    "\1\26\2\0\1\26\15\0\6\26\1\0\11\26\1\0"+
    "\5\26\12\0\1\26\5\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\6\26\1\0\7\26\1\174\1\26\1\0"+
    "\5\26\12\0\1\26\5\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\6\26\1\0\6\26\1\175\2\26\1\0"+
    "\5\26\12\0\1\26\5\0\2\26\1\0\2\26\2\0"+
    "\1\26\15\0\1\176\5\26\1\0\11\26\1\0\5\26"+
    "\12\0\1\26\5\0\2\26\1\0\2\26\2\0\1\26"+
    "\15\0\5\26\1\177\1\0\11\26\1\0\5\26\12\0"+
    "\1\26\5\0\2\26\1\0\2\26\2\0\1\26\15\0"+
    "\5\26\1\200\1\0\11\26\1\0\5\26\12\0\1\26"+
    "\5\0\2\26\1\0\1\201\1\26\2\0\1\26\15\0"+
    "\6\26\1\0\11\26\1\0\5\26\12\0\1\26\5\0"+
    "\2\26\1\0\1\202\1\26\2\0\1\26\15\0\6\26"+
    "\1\0\11\26\1\0\5\26\12\0\1\26\5\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\6\26\1\0\11\26"+
    "\1\0\3\26\1\203\1\26\12\0\1\26\5\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\6\26\1\0\1\26"+
    "\1\204\7\26\1\0\5\26\12\0\1\26\5\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\1\26\1\205\4\26"+
    "\1\0\11\26\1\0\5\26\12\0\1\26\5\0\2\26"+
    "\1\0\2\26\2\0\1\26\15\0\6\26\1\0\4\26"+
    "\1\206\4\26\1\0\5\26\12\0\1\26\5\0\2\26"+
    "\1\0\1\207\1\26\2\0\1\26\15\0\6\26\1\0"+
    "\11\26\1\0\5\26\12\0\1\26\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4484];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\2\11\1\1\5\11\2\1\2\11\4\1\1\11"+
    "\2\1\2\11\2\1\4\11\20\1\10\11\2\1\2\11"+
    "\4\1\1\11\1\1\1\0\1\1\7\11\5\1\1\11"+
    "\5\1\1\11\1\0\3\1\2\0\5\11\3\0\13\1"+
    "\3\11\21\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[135];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private SymbolFactory sf;
	private StringBuffer string = new StringBuffer();

	public Scanner(java.io.InputStream r, SymbolFactory sf) {
		this(r);
		this.sf=sf;
	}

	private Symbol symbol(int type) {
		return new Symbol(type, yyline, yycolumn);
		
	}
	
	private Symbol symbol(int type, Object value) {
		return new Symbol(type, yyline, yycolumn, value);
	}
	
	private static final int TAB_LENGTH = 4;
	
	Stack<Integer> stack = new Stack<Integer>();
   	private int current_indent;
   	private boolean colon;
   	private boolean map;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
          this.stack.push(0);
        current_indent = 0;
        colon = false;
        map = false;
        yybegin(INDENT_STATE);
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 154) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 9: 
          { /* ignore */
          }
        case 70: break;
        case 17: 
          { System.out.println("DIV");
								return new Symbol(sym.DIV, yyline, yycolumn, yytext());
          }
        case 71: break;
        case 5: 
          { System.out.println("SPACE");
									current_indent = current_indent + 1;
          }
        case 72: break;
        case 38: 
          { System.out.println("LONG");
  								return new Symbol(sym.LONG, yyline, yycolumn, yytext());
          }
        case 73: break;
        case 50: 
          { if(!colon){
													colon = true;
													System.out.println("COLON");
													yypushback(yylength());
													return symbol(sym.COLON);
												}
					    						colon = false;
				                                System.out.println("NEWLINE");
												yybegin(BLOCK_STATE);
				                                current_indent = 0;
				                                return symbol(sym.NEWLINE);
          }
        case 74: break;
        case 43: 
          { System.out.println("LESSEQUAL_THAN");
								return symbol(sym.LESSEQUAL_THAN);
          }
        case 75: break;
        case 40: 
          { System.out.println("EQUALS");
								return symbol(sym.EQUALS);
          }
        case 76: break;
        case 7: 
          { yypushback(1);
                                 	if (current_indent > stack.peek()){
                                 		System.out.println("START_BLOCK");
                                    	stack.push(current_indent);
                                      	yybegin(NORMAL_STATE);
                                     	return symbol(sym.START_BLOCK);
                                     }
                                     else if (current_indent == stack.peek()){
                                      	yybegin(NORMAL_STATE);
                                     }
                                     else{
                                     	System.out.println("END_BLOCK");
                                     	int tmp = stack.pop();
                                      	return symbol(sym.END_BLOCK);
                                     }
          }
        case 77: break;
        case 41: 
          { System.out.println("EXP");
								return new Symbol(sym.EXP, yyline, yycolumn, yytext());
          }
        case 78: break;
        case 32: 
          { System.out.println("COMMA");
								return symbol(sym.COMMA);
          }
        case 79: break;
        case 27: 
          { System.out.println("LEFTLLAVE");
								map = true;
								return symbol(sym.LEFTLLAVE);
          }
        case 80: break;
        case 19: 
          { System.out.println("AND_BIT");
								return symbol(sym.AND_BIT);
          }
        case 81: break;
        case 60: 
          { string.setLength(0);
								yybegin(DOUBLE_QUOTE_TRIPLE_STRING);
          }
        case 82: break;
        case 2: 
          { if (current_indent > stack.peek()){
                                 		if(!map)
                                 			throw new ParsingException(yyline, yycolumn, "Error lexicografico: Indentacion incorrecta." );
                                 		else{
                                 				yypushback(1);
                                      			yybegin(NORMAL_STATE);
                                 			}
                                     }
                                     else if (current_indent == stack.peek()){
                                     	yypushback(1);
                                      	yybegin(NORMAL_STATE);
                                     }
                                     else{
                                     	System.out.println("END_BLOCK");
                                     	yypushback(1);
                                      	int tmp = stack.pop();
                                      	return symbol(sym.END_BLOCK);
                                     }
          }
        case 83: break;
        case 21: 
          { System.out.println("NOT_BIT");
								return symbol(sym.NOT_BIT);
          }
        case 84: break;
        case 68: 
          { System.out.println("BREAK");
								return symbol(sym.BREAK);
          }
        case 85: break;
        case 67: 
          { System.out.println("WHILE");
								return symbol(sym.WHILE);
          }
        case 86: break;
        case 65: 
          { System.out.println("PRINT");
								return symbol(sym.PRINT);
          }
        case 87: break;
        case 53: 
          { string.append('\t');
          }
        case 88: break;
        case 66: 
          { System.out.println("FALSE");
								return symbol(sym.FALSE);
          }
        case 89: break;
        case 58: 
          { System.out.println("DEF");
								return symbol(sym.DEF);
          }
        case 90: break;
        case 47: 
          { System.out.println("OR");
								return symbol(sym.OR);
          }
        case 91: break;
        case 13: 
          { System.out.println("ASSIGN");
  								return new Symbol(sym.ASSIGN, yyline, yycolumn, "=");
          }
        case 92: break;
        case 69: 
          { System.out.println("CONTINUE");
								return symbol(sym.CONTINUE);
          }
        case 93: break;
        case 61: 
          { System.out.println("STRING");
								yybegin(NORMAL_STATE); 
								return new Symbol(sym.STRING, yyline, yycolumn, string.toString());
          }
        case 94: break;
        case 15: 
          { System.out.println("MINUS");
								return new Symbol(sym.MINUS, yyline, yycolumn, yytext());
          }
        case 95: break;
        case 57: 
          { System.out.println("NOT");
	 							return symbol(sym.NOT);
          }
        case 96: break;
        case 45: 
          { System.out.println("GREATEQUAL_THAN");
								return symbol(sym.GREATEQUAL_THAN);
          }
        case 97: break;
        case 6: 
          { System.out.println("TAB");
									current_indent = current_indent + TAB_LENGTH;
          }
        case 98: break;
        case 56: 
          { System.out.println("AND");
								return symbol(sym.AND);
          }
        case 99: break;
        case 37: 
          { string.append('\\');
          }
        case 100: break;
        case 52: 
          { string.append('\r');
          }
        case 101: break;
        case 8: 
          { System.out.println("NEWLINE");
								yybegin(INDENT_STATE);
                                current_indent = 0;
                                return symbol(sym.NEWLINE);
          }
        case 102: break;
        case 29: 
          { System.out.println("LEFTRECT");
								return symbol(sym.LEFTRECT);
          }
        case 103: break;
        case 49: 
          { System.out.println("IF");
								return symbol(sym.IF);
          }
        case 104: break;
        case 48: 
          { System.out.println("NOT_EQUALS");
								return symbol(sym.NOT_EQUALS);
          }
        case 105: break;
        case 10: 
          { System.out.println("INTEGER");
								return symbol(sym.INTEGER, yytext());
          }
        case 106: break;
        case 11: 
          { System.out.println("ID");
								return new Symbol(sym.ID, yyline, yycolumn, yytext());
          }
        case 107: break;
        case 59: 
          { string.setLength(0);
								yybegin(SIMPLE_QUOTE_TRIPLE_STRING);
          }
        case 108: break;
        case 54: 
          { string.append('\"');
          }
        case 109: break;
        case 3: 
          { if (current_indent > stack.peek()){
                                 		System.out.println("START_BLOCK");
                                    	stack.push(current_indent);
                                       	yybegin(NORMAL_STATE);
                                      	return symbol(sym.START_BLOCK);
                                  	}
                                    else if (current_indent == stack.peek()){
                                      	yybegin(NORMAL_STATE);
                                    }
                                    else{
                                     	System.out.println("END_BLOCK");
                                     	yypushback(1);
                                      	int tmp = stack.pop();
                                      	return symbol(sym.END_BLOCK);
                                    }
          }
        case 110: break;
        case 22: 
          { System.out.println("LESS_THAN");
								return symbol(sym.LESS_THAN);
          }
        case 111: break;
        case 62: 
          { System.out.println("ELSE");
								return symbol(sym.ELSE);
          }
        case 112: break;
        case 55: 
          { string.append('\'');
          }
        case 113: break;
        case 4: 
          { /*Ignore whitespace*/
          }
        case 114: break;
        case 64: 
          { System.out.println("TRUE");
								return symbol(sym.TRUE);
          }
        case 115: break;
        case 44: 
          { System.out.println("LSHIFT_BIT");
								return symbol(sym.LSHIFT_BIT);
          }
        case 116: break;
        case 12: 
          { System.out.println("OR_BIT");
								return symbol(sym.OR_BIT);
          }
        case 117: break;
        case 34: 
          { string.setLength(0);
								yybegin(DOUBLE_QUOTE_ONCE_STRING);
          }
        case 118: break;
        case 63: 
          { System.out.println("TYPE");
								return symbol(sym.TYPE);
          }
        case 119: break;
        case 14: 
          { System.out.println("PLUS");
  								return new Symbol(sym.PLUS, yyline, yycolumn, yytext());
          }
        case 120: break;
        case 51: 
          { string.append('\n');
          }
        case 121: break;
        case 42: 
          { System.out.println("INT_DIV");
								return new Symbol(sym.INT_DIV, yyline, yycolumn, yytext());
          }
        case 122: break;
        case 28: 
          { System.out.println("RIGHTLLAVE");
								map = false;
								return symbol(sym.RIGHTLLAVE);
          }
        case 123: break;
        case 35: 
          { string.append(yytext());
          }
        case 124: break;
        case 33: 
          { string.setLength(0);
								yybegin(SIMPLE_QUOTE_ONCE_STRING);
          }
        case 125: break;
        case 20: 
          { System.out.println("XOR_BIT");
								return symbol(sym.XOR_BIT);
          }
        case 126: break;
        case 46: 
          { System.out.println("RSHIFT_BIT");
								return symbol(sym.RSHIFT_BIT);
          }
        case 127: break;
        case 39: 
          { System.out.println("FLOAT");
  								return new Symbol(sym.FLOAT, yyline, yycolumn, yytext());
          }
        case 128: break;
        case 23: 
          { System.out.println("GREAT_THAN");
								return symbol(sym.GREAT_THAN);
          }
        case 129: break;
        case 24: 
          { System.out.println("COLON");
								return symbol(sym.COLON);
          }
        case 130: break;
        case 1: 
          { throw new ParsingException(yyline, yycolumn, "No se reconoce lexicograficamente el caracter: " + yytext());
          }
        case 131: break;
        case 36: 
          { System.out.println("STRING");
								yybegin(NORMAL_STATE);
								return new Symbol(sym.STRING, yyline, yycolumn, string.toString());
          }
        case 132: break;
        case 30: 
          { System.out.println("RIGHTRECT");
								return symbol(sym.RIGHTRECT);
          }
        case 133: break;
        case 26: 
          { System.out.println("RIGHTPARENTHESE");
								return symbol(sym.RIGHTPARENTHESE);
          }
        case 134: break;
        case 31: 
          { System.out.println("SEMICOLON");
								return symbol(sym.SEMICOLON);
          }
        case 135: break;
        case 16: 
          { System.out.println("MUL");
								return new Symbol(sym.MUL, yyline, yycolumn, yytext());
          }
        case 136: break;
        case 18: 
          { System.out.println("MOD");
								return new Symbol(sym.MOD, yyline, yycolumn, yytext());
          }
        case 137: break;
        case 25: 
          { System.out.println("LEFTPARENTHESE");
								return symbol(sym.LEFTPARENTHESE);
          }
        case 138: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 		if(stack.size() > 1){
			yypushback(yylength());
          	int tmp = stack.pop();
          	System.out.println("END_BLOCK");
          	return symbol(sym.END_BLOCK);
		}
		
		return symbol(sym.EOF);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
